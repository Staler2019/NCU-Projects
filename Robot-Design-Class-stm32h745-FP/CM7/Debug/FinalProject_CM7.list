
FinalProject_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000178  200000a4  08006dbc  000200a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000021c  08006dbc  0002021c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b87  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002774  00000000  00000000  00035c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bf0  00000000  00000000  000383d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000af8  00000000  00000000  00038fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000392fb  00000000  00000000  00039ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b93a  00000000  00000000  00072db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00176cb9  00000000  00000000  0007e6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001f53a6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003968  00000000  00000000  001f5424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000a4 	.word	0x200000a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006a98 	.word	0x08006a98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000a8 	.word	0x200000a8
 80002dc:	08006a98 	.word	0x08006a98

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b972 	b.w	800069c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	4688      	mov	r8, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14b      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4615      	mov	r5, r2
 80003e2:	d967      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0720 	rsb	r7, r2, #32
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	fa20 f707 	lsr.w	r7, r0, r7
 80003f6:	4095      	lsls	r5, r2
 80003f8:	ea47 0803 	orr.w	r8, r7, r3
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbb8 f7fe 	udiv	r7, r8, lr
 8000408:	fa1f fc85 	uxth.w	ip, r5
 800040c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000410:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000414:	fb07 f10c 	mul.w	r1, r7, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000422:	f080 811b 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8118 	bls.w	800065c <__udivmoddi4+0x28c>
 800042c:	3f02      	subs	r7, #2
 800042e:	442b      	add	r3, r5
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fc0c 	mul.w	ip, r0, ip
 8000444:	45a4      	cmp	ip, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	192c      	adds	r4, r5, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8107 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000452:	45a4      	cmp	ip, r4
 8000454:	f240 8104 	bls.w	8000660 <__udivmoddi4+0x290>
 8000458:	3802      	subs	r0, #2
 800045a:	442c      	add	r4, r5
 800045c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000460:	eba4 040c 	sub.w	r4, r4, ip
 8000464:	2700      	movs	r7, #0
 8000466:	b11e      	cbz	r6, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c6 4300 	strd	r4, r3, [r6]
 8000470:	4639      	mov	r1, r7
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d909      	bls.n	800048e <__udivmoddi4+0xbe>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80eb 	beq.w	8000656 <__udivmoddi4+0x286>
 8000480:	2700      	movs	r7, #0
 8000482:	e9c6 0100 	strd	r0, r1, [r6]
 8000486:	4638      	mov	r0, r7
 8000488:	4639      	mov	r1, r7
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	fab3 f783 	clz	r7, r3
 8000492:	2f00      	cmp	r7, #0
 8000494:	d147      	bne.n	8000526 <__udivmoddi4+0x156>
 8000496:	428b      	cmp	r3, r1
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0xd0>
 800049a:	4282      	cmp	r2, r0
 800049c:	f200 80fa 	bhi.w	8000694 <__udivmoddi4+0x2c4>
 80004a0:	1a84      	subs	r4, r0, r2
 80004a2:	eb61 0303 	sbc.w	r3, r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	4698      	mov	r8, r3
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d0e0      	beq.n	8000470 <__udivmoddi4+0xa0>
 80004ae:	e9c6 4800 	strd	r4, r8, [r6]
 80004b2:	e7dd      	b.n	8000470 <__udivmoddi4+0xa0>
 80004b4:	b902      	cbnz	r2, 80004b8 <__udivmoddi4+0xe8>
 80004b6:	deff      	udf	#255	; 0xff
 80004b8:	fab2 f282 	clz	r2, r2
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f040 808f 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c2:	1b49      	subs	r1, r1, r5
 80004c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c8:	fa1f f885 	uxth.w	r8, r5
 80004cc:	2701      	movs	r7, #1
 80004ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80004d2:	0c23      	lsrs	r3, r4, #16
 80004d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004dc:	fb08 f10c 	mul.w	r1, r8, ip
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e4:	18eb      	adds	r3, r5, r3
 80004e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4299      	cmp	r1, r3
 80004ee:	f200 80cd 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004f2:	4684      	mov	ip, r0
 80004f4:	1a59      	subs	r1, r3, r1
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000500:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000504:	fb08 f800 	mul.w	r8, r8, r0
 8000508:	45a0      	cmp	r8, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x14c>
 800050c:	192c      	adds	r4, r5, r4
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x14a>
 8000514:	45a0      	cmp	r8, r4
 8000516:	f200 80b6 	bhi.w	8000686 <__udivmoddi4+0x2b6>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 0408 	sub.w	r4, r4, r8
 8000520:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000524:	e79f      	b.n	8000466 <__udivmoddi4+0x96>
 8000526:	f1c7 0c20 	rsb	ip, r7, #32
 800052a:	40bb      	lsls	r3, r7
 800052c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000530:	ea4e 0e03 	orr.w	lr, lr, r3
 8000534:	fa01 f407 	lsl.w	r4, r1, r7
 8000538:	fa20 f50c 	lsr.w	r5, r0, ip
 800053c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000540:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000544:	4325      	orrs	r5, r4
 8000546:	fbb3 f9f8 	udiv	r9, r3, r8
 800054a:	0c2c      	lsrs	r4, r5, #16
 800054c:	fb08 3319 	mls	r3, r8, r9, r3
 8000550:	fa1f fa8e 	uxth.w	sl, lr
 8000554:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000558:	fb09 f40a 	mul.w	r4, r9, sl
 800055c:	429c      	cmp	r4, r3
 800055e:	fa02 f207 	lsl.w	r2, r2, r7
 8000562:	fa00 f107 	lsl.w	r1, r0, r7
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1e 0303 	adds.w	r3, lr, r3
 800056c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000570:	f080 8087 	bcs.w	8000682 <__udivmoddi4+0x2b2>
 8000574:	429c      	cmp	r4, r3
 8000576:	f240 8084 	bls.w	8000682 <__udivmoddi4+0x2b2>
 800057a:	f1a9 0902 	sub.w	r9, r9, #2
 800057e:	4473      	add	r3, lr
 8000580:	1b1b      	subs	r3, r3, r4
 8000582:	b2ad      	uxth	r5, r5
 8000584:	fbb3 f0f8 	udiv	r0, r3, r8
 8000588:	fb08 3310 	mls	r3, r8, r0, r3
 800058c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000590:	fb00 fa0a 	mul.w	sl, r0, sl
 8000594:	45a2      	cmp	sl, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1e 0404 	adds.w	r4, lr, r4
 800059c:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a0:	d26b      	bcs.n	800067a <__udivmoddi4+0x2aa>
 80005a2:	45a2      	cmp	sl, r4
 80005a4:	d969      	bls.n	800067a <__udivmoddi4+0x2aa>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4474      	add	r4, lr
 80005aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ae:	fba0 8902 	umull	r8, r9, r0, r2
 80005b2:	eba4 040a 	sub.w	r4, r4, sl
 80005b6:	454c      	cmp	r4, r9
 80005b8:	46c2      	mov	sl, r8
 80005ba:	464b      	mov	r3, r9
 80005bc:	d354      	bcc.n	8000668 <__udivmoddi4+0x298>
 80005be:	d051      	beq.n	8000664 <__udivmoddi4+0x294>
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d069      	beq.n	8000698 <__udivmoddi4+0x2c8>
 80005c4:	ebb1 050a 	subs.w	r5, r1, sl
 80005c8:	eb64 0403 	sbc.w	r4, r4, r3
 80005cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005d0:	40fd      	lsrs	r5, r7
 80005d2:	40fc      	lsrs	r4, r7
 80005d4:	ea4c 0505 	orr.w	r5, ip, r5
 80005d8:	e9c6 5400 	strd	r5, r4, [r6]
 80005dc:	2700      	movs	r7, #0
 80005de:	e747      	b.n	8000470 <__udivmoddi4+0xa0>
 80005e0:	f1c2 0320 	rsb	r3, r2, #32
 80005e4:	fa20 f703 	lsr.w	r7, r0, r3
 80005e8:	4095      	lsls	r5, r2
 80005ea:	fa01 f002 	lsl.w	r0, r1, r2
 80005ee:	fa21 f303 	lsr.w	r3, r1, r3
 80005f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005f6:	4338      	orrs	r0, r7
 80005f8:	0c01      	lsrs	r1, r0, #16
 80005fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80005fe:	fa1f f885 	uxth.w	r8, r5
 8000602:	fb0e 3317 	mls	r3, lr, r7, r3
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb07 f308 	mul.w	r3, r7, r8
 800060e:	428b      	cmp	r3, r1
 8000610:	fa04 f402 	lsl.w	r4, r4, r2
 8000614:	d907      	bls.n	8000626 <__udivmoddi4+0x256>
 8000616:	1869      	adds	r1, r5, r1
 8000618:	f107 3cff 	add.w	ip, r7, #4294967295
 800061c:	d22f      	bcs.n	800067e <__udivmoddi4+0x2ae>
 800061e:	428b      	cmp	r3, r1
 8000620:	d92d      	bls.n	800067e <__udivmoddi4+0x2ae>
 8000622:	3f02      	subs	r7, #2
 8000624:	4429      	add	r1, r5
 8000626:	1acb      	subs	r3, r1, r3
 8000628:	b281      	uxth	r1, r0
 800062a:	fbb3 f0fe 	udiv	r0, r3, lr
 800062e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000632:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000636:	fb00 f308 	mul.w	r3, r0, r8
 800063a:	428b      	cmp	r3, r1
 800063c:	d907      	bls.n	800064e <__udivmoddi4+0x27e>
 800063e:	1869      	adds	r1, r5, r1
 8000640:	f100 3cff 	add.w	ip, r0, #4294967295
 8000644:	d217      	bcs.n	8000676 <__udivmoddi4+0x2a6>
 8000646:	428b      	cmp	r3, r1
 8000648:	d915      	bls.n	8000676 <__udivmoddi4+0x2a6>
 800064a:	3802      	subs	r0, #2
 800064c:	4429      	add	r1, r5
 800064e:	1ac9      	subs	r1, r1, r3
 8000650:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000654:	e73b      	b.n	80004ce <__udivmoddi4+0xfe>
 8000656:	4637      	mov	r7, r6
 8000658:	4630      	mov	r0, r6
 800065a:	e709      	b.n	8000470 <__udivmoddi4+0xa0>
 800065c:	4607      	mov	r7, r0
 800065e:	e6e7      	b.n	8000430 <__udivmoddi4+0x60>
 8000660:	4618      	mov	r0, r3
 8000662:	e6fb      	b.n	800045c <__udivmoddi4+0x8c>
 8000664:	4541      	cmp	r1, r8
 8000666:	d2ab      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 8000668:	ebb8 0a02 	subs.w	sl, r8, r2
 800066c:	eb69 020e 	sbc.w	r2, r9, lr
 8000670:	3801      	subs	r0, #1
 8000672:	4613      	mov	r3, r2
 8000674:	e7a4      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000676:	4660      	mov	r0, ip
 8000678:	e7e9      	b.n	800064e <__udivmoddi4+0x27e>
 800067a:	4618      	mov	r0, r3
 800067c:	e795      	b.n	80005aa <__udivmoddi4+0x1da>
 800067e:	4667      	mov	r7, ip
 8000680:	e7d1      	b.n	8000626 <__udivmoddi4+0x256>
 8000682:	4681      	mov	r9, r0
 8000684:	e77c      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000686:	3802      	subs	r0, #2
 8000688:	442c      	add	r4, r5
 800068a:	e747      	b.n	800051c <__udivmoddi4+0x14c>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	442b      	add	r3, r5
 8000692:	e72f      	b.n	80004f4 <__udivmoddi4+0x124>
 8000694:	4638      	mov	r0, r7
 8000696:	e708      	b.n	80004aa <__udivmoddi4+0xda>
 8000698:	4637      	mov	r7, r6
 800069a:	e6e9      	b.n	8000470 <__udivmoddi4+0xa0>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a4:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <SystemInit+0x104>)
 80006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006aa:	4a3e      	ldr	r2, [pc, #248]	; (80007a4 <SystemInit+0x104>)
 80006ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <SystemInit+0x104>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <SystemInit+0x104>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 030f 	and.w	r3, r3, #15
 80006c8:	2b06      	cmp	r3, #6
 80006ca:	d807      	bhi.n	80006dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006cc:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <SystemInit+0x108>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f023 030f 	bic.w	r3, r3, #15
 80006d4:	4a34      	ldr	r2, [pc, #208]	; (80007a8 <SystemInit+0x108>)
 80006d6:	f043 0307 	orr.w	r3, r3, #7
 80006da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006dc:	4b33      	ldr	r3, [pc, #204]	; (80007ac <SystemInit+0x10c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a32      	ldr	r2, [pc, #200]	; (80007ac <SystemInit+0x10c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <SystemInit+0x10c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <SystemInit+0x10c>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	492e      	ldr	r1, [pc, #184]	; (80007ac <SystemInit+0x10c>)
 80006f4:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <SystemInit+0x110>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	2b07      	cmp	r3, #7
 8000704:	d907      	bls.n	8000716 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemInit+0x108>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f023 030f 	bic.w	r3, r3, #15
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <SystemInit+0x108>)
 8000710:	f043 0307 	orr.w	r3, r3, #7
 8000714:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemInit+0x10c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <SystemInit+0x10c>)
 800072a:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <SystemInit+0x114>)
 800072c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemInit+0x10c>)
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemInit+0x118>)
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <SystemInit+0x10c>)
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemInit+0x11c>)
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <SystemInit+0x10c>)
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <SystemInit+0x11c>)
 8000744:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <SystemInit+0x10c>)
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <SystemInit+0x11c>)
 8000750:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <SystemInit+0x10c>)
 8000754:	2200      	movs	r2, #0
 8000756:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <SystemInit+0x10c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <SystemInit+0x10c>)
 800075e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x10c>)
 8000766:	2200      	movs	r2, #0
 8000768:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <SystemInit+0x120>)
 800076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <SystemInit+0x120>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <SystemInit+0x124>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <SystemInit+0x128>)
 800077c:	4013      	ands	r3, r2
 800077e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000782:	d202      	bcs.n	800078a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <SystemInit+0x12c>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SystemInit+0x130>)
 800078c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000790:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SystemInit+0x104>)
 8000794:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000798:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	52002000 	.word	0x52002000
 80007ac:	58024400 	.word	0x58024400
 80007b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b4:	02020200 	.word	0x02020200
 80007b8:	01ff0000 	.word	0x01ff0000
 80007bc:	01010280 	.word	0x01010280
 80007c0:	580000c0 	.word	0x580000c0
 80007c4:	5c001000 	.word	0x5c001000
 80007c8:	ffff0000 	.word	0xffff0000
 80007cc:	51008108 	.word	0x51008108
 80007d0:	52004000 	.word	0x52004000

080007d4 <robotInit>:
@Description
    use for robot design class
*/
void robotInit(UART_HandleTypeDef *huart,
               uint32_t arrive_time)
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b092      	sub	sp, #72	; 0x48
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
    uint32_t servo_amount = 6;
 80007de:	2306      	movs	r3, #6
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t servo_list[6] = {1, 2, 3, 4, 5, 6};
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <robotInit+0x54>)
 80007e4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80007e8:	461d      	mov	r5, r3
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f2:	e884 0003 	stmia.w	r4, {r0, r1}
    uint32_t servo_pwm_list[6] = {1500, 1500, 1500,
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <robotInit+0x58>)
 80007f8:	f107 040c 	add.w	r4, r7, #12
 80007fc:	461d      	mov	r5, r3
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000806:	e884 0003 	stmia.w	r4, {r0, r1}
                                  1500, 1500, 1500};
    robot_control_cmd(huart, servo_amount, arrive_time,
 800080a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f808 	bl	8000830 <robot_control_cmd>
                      servo_list, servo_pwm_list);
}
 8000820:	bf00      	nop
 8000822:	3740      	adds	r7, #64	; 0x40
 8000824:	46bd      	mov	sp, r7
 8000826:	bdb0      	pop	{r4, r5, r7, pc}
 8000828:	08006ab0 	.word	0x08006ab0
 800082c:	08006ac8 	.word	0x08006ac8

08000830 <robot_control_cmd>:
int robot_control_cmd(UART_HandleTypeDef *huart,
                      uint32_t servo_amount,
                      uint32_t arrive_time,
                      uint32_t *servo_list,
                      uint32_t *servo_pwm_list)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
    uint32_t length = servo_amount * 3 + 5;
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	3305      	adds	r3, #5
 8000848:	617b      	str	r3, [r7, #20]
    uint8_t *cmd_data =
        (uint8_t *)malloc(sizeof(uint8_t) * (length + 2));
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3302      	adds	r3, #2
    uint8_t *cmd_data =
 800084e:	4618      	mov	r0, r3
 8000850:	f005 f96c 	bl	8005b2c <malloc>
 8000854:	4603      	mov	r3, r0
 8000856:	613b      	str	r3, [r7, #16]
    cmd_data[0] = 0x55;
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2255      	movs	r2, #85	; 0x55
 800085c:	701a      	strb	r2, [r3, #0]
    cmd_data[1] = 0x55;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	3301      	adds	r3, #1
 8000862:	2255      	movs	r2, #85	; 0x55
 8000864:	701a      	strb	r2, [r3, #0]
    cmd_data[2] = length;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	3302      	adds	r3, #2
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	701a      	strb	r2, [r3, #0]
    cmd_data[3] = 0x03;
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	3303      	adds	r3, #3
 8000874:	2203      	movs	r2, #3
 8000876:	701a      	strb	r2, [r3, #0]
    cmd_data[4] = servo_amount;
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	3304      	adds	r3, #4
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	701a      	strb	r2, [r3, #0]
    cmd_data[5] = (arrive_time << 8 & 0xffff) >> 8;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	0a1a      	lsrs	r2, r3, #8
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	3305      	adds	r3, #5
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	701a      	strb	r2, [r3, #0]
    cmd_data[6] = (arrive_time & 0xffff) >> 8;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	0a1a      	lsrs	r2, r3, #8
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	3306      	adds	r3, #6
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	701a      	strb	r2, [r3, #0]
    uint32_t i = 0, k = 7;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	2307      	movs	r3, #7
 80008a2:	61bb      	str	r3, [r7, #24]
    while (k < length + 2) {
 80008a4:	e02c      	b.n	8000900 <robot_control_cmd+0xd0>
        cmd_data[k] = servo_list[i];
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	6819      	ldr	r1, [r3, #0]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	4413      	add	r3, r2
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
        k++;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	3301      	adds	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
        cmd_data[k] =
            (servo_pwm_list[i] << 8 & 0xffff) >> 8;
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008c6:	4413      	add	r3, r2
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	0a19      	lsrs	r1, r3, #8
        cmd_data[k] =
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	4413      	add	r3, r2
 80008d4:	b2ca      	uxtb	r2, r1
 80008d6:	701a      	strb	r2, [r3, #0]
        k++;
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	3301      	adds	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
        cmd_data[k] = servo_pwm_list[i] >> 8;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e4:	4413      	add	r3, r2
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	0a19      	lsrs	r1, r3, #8
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	b2ca      	uxtb	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
        k++;
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	3301      	adds	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
        i++;
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
    while (k < length + 2) {
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3302      	adds	r3, #2
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	429a      	cmp	r2, r3
 8000908:	d3cd      	bcc.n	80008a6 <robot_control_cmd+0x76>
    }
    HAL_UART_Transmit(huart, cmd_data, length + 2,
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	b29b      	uxth	r3, r3
 800090e:	3302      	adds	r3, #2
 8000910:	b29a      	uxth	r2, r3
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	6939      	ldr	r1, [r7, #16]
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f003 fdb3 	bl	8004484 <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    HAL_Delay(arrive_time);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 ff82 	bl	8001828 <HAL_Delay>
    return 1;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
// HAL库
PUTCHAR_PROTOTYPE {  // scanf() usually not use
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000938:	1d39      	adds	r1, r7, #4
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2201      	movs	r2, #1
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <__io_putchar+0x20>)
 8000942:	f003 fd9f 	bl	8004484 <HAL_UART_Transmit>
    return ch;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000d4 	.word	0x200000d4

08000954 <__io_getchar>:
GETCHAR_PROTOTYPE {  // printf()
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    uint8_t ch;
    HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800095c:	f107 010f 	add.w	r1, r7, #15
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	2201      	movs	r2, #1
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <__io_getchar+0x24>)
 8000968:	f003 fe22 	bl	80045b0 <HAL_UART_Receive>
    return ch;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000d4 	.word	0x200000d4

0800097c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 8000982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000986:	607b      	str	r3, [r7, #4]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000988:	bf00      	nop
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <main+0xac>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <main+0x24>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	1e5a      	subs	r2, r3, #1
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dcf4      	bgt.n	800098a <main+0xe>
        ;
    if (timeout < 0) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	da01      	bge.n	80009aa <main+0x2e>
        Error_Handler();
 80009a6:	f000 fcf5 	bl	8001394 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80009aa:	f000 feab 	bl	8001704 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80009ae:	f000 f83f 	bl	8000a30 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <main+0xac>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <main+0xac>)
 80009ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <main+0xac>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f001 f9eb 	bl	8001dac <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa01 	bl	8001de0 <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 80009de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e2:	607b      	str	r3, [r7, #4]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80009e4:	bf00      	nop
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <main+0xac>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d104      	bne.n	80009fc <main+0x80>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	1e5a      	subs	r2, r3, #1
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dcf4      	bgt.n	80009e6 <main+0x6a>
        ;
    if (timeout < 0) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da01      	bge.n	8000a06 <main+0x8a>
        Error_Handler();
 8000a02:	f000 fcc7 	bl	8001394 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000a06:	f000 f943 	bl	8000c90 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8000a0a:	f000 f8f5 	bl	8000bf8 <MX_USART3_UART_Init>
    MX_USART2_UART_Init();
 8000a0e:	f000 f8a7 	bl	8000b60 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    init();
 8000a12:	f000 fa03 	bl	8000e1c <init>

    robotInit(&huart2, 2000);
 8000a16:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <main+0xb0>)
 8000a1c:	f7ff feda 	bl	80007d4 <robotInit>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        grafcet();
 8000a20:	f000 fa26 	bl	8000e70 <grafcet>
 8000a24:	e7fc      	b.n	8000a20 <main+0xa4>
 8000a26:	bf00      	nop
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	20000178 	.word	0x20000178

08000a30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0cc      	sub	sp, #304	; 0x130
 8000a34:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a3a:	224c      	movs	r2, #76	; 0x4c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f87c 	bl	8005b3c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a48:	2220      	movs	r2, #32
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 f875 	bl	8005b3c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	23bc      	movs	r3, #188	; 0xbc
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f005 f86d 	bl	8005b3c <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a62:	2004      	movs	r0, #4
 8000a64:	f001 f9d0 	bl	8001e08 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <SystemClock_Config+0x128>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <SystemClock_Config+0x128>)
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a7a:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <SystemClock_Config+0x128>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	f003 0201 	and.w	r2, r3, #1
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <SystemClock_Config+0x12c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8e:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <SystemClock_Config+0x12c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <SystemClock_Config+0x12c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000aa6:	bf00      	nop
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <SystemClock_Config+0x12c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab4:	d1f8      	bne.n	8000aa8 <SystemClock_Config+0x78>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ace:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f9f2 	bl	8001ebc <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xb2>
        Error_Handler();
 8000ade:	f000 fc59 	bl	8001394 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 8000ae2:	233f      	movs	r3, #63	; 0x3f
 8000ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 |
                                  RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fddf 	bl	80026dc <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xf8>
        Error_Handler();
 8000b24:	f000 fc36 	bl	8001394 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART2;
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2200      	movs	r2, #0
 8000b36:	675a      	str	r2, [r3, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 f951 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x11c>
        Error_Handler();
 8000b48:	f000 fc24 	bl	8001394 <Error_Handler>
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58000400 	.word	0x58000400
 8000b5c:	58024800 	.word	0x58024800

08000b60 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <MX_USART2_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b70:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000baa:	f003 fc1b 	bl	80043e4 <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART2_UART_Init+0x58>
        Error_Handler();
 8000bb4:	f000 fbee 	bl	8001394 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000bbc:	f004 fd1b 	bl	80055f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x6a>
        Error_Handler();
 8000bc6:	f000 fbe5 	bl	8001394 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000bce:	f004 fd50 	bl	8005672 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART2_UART_Init+0x7c>
        Error_Handler();
 8000bd8:	f000 fbdc 	bl	8001394 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000bde:	f004 fcd1 	bl	8005584 <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART2_UART_Init+0x8c>
        Error_Handler();
 8000be8:	f000 fbd4 	bl	8001394 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000178 	.word	0x20000178
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <MX_USART3_UART_Init+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c42:	f003 fbcf 	bl	80043e4 <HAL_UART_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8000c4c:	f000 fba2 	bl	8001394 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000c50:	2100      	movs	r1, #0
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c54:	f004 fccf 	bl	80055f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART3_UART_Init+0x6a>
        Error_Handler();
 8000c5e:	f000 fb99 	bl	8001394 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000c62:	2100      	movs	r1, #0
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c66:	f004 fd04 	bl	8005672 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x7c>
        Error_Handler();
 8000c70:	f000 fb90 	bl	8001394 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c76:	f004 fc85 	bl	8005584 <HAL_UARTEx_DisableFifoMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x8c>
        Error_Handler();
 8000c80:	f000 fb88 	bl	8001394 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000d4 	.word	0x200000d4
 8000c8c:	40004800 	.word	0x40004800

08000c90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a56      	ldr	r2, [pc, #344]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc4:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a4f      	ldr	r2, [pc, #316]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a40      	ldr	r2, [pc, #256]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_GPIO_Init+0x178>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : PC1 PC4 PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000d5a:	2332      	movs	r3, #50	; 0x32
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4825      	ldr	r0, [pc, #148]	; (8000e0c <MX_GPIO_Init+0x17c>)
 8000d76:	f000 fe69 	bl	8001a4c <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA2 PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000d7a:	2386      	movs	r3, #134	; 0x86
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8a:	230b      	movs	r3, #11
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	481e      	ldr	r0, [pc, #120]	; (8000e10 <MX_GPIO_Init+0x180>)
 8000d96:	f000 fe59 	bl	8001a4c <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dac:	230b      	movs	r3, #11
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4817      	ldr	r0, [pc, #92]	; (8000e14 <MX_GPIO_Init+0x184>)
 8000db8:	f000 fe48 	bl	8001a4c <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA11 PA12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000dbc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_GPIO_Init+0x180>)
 8000dda:	f000 fe37 	bl	8001a4c <HAL_GPIO_Init>

    /*Configure GPIO pins : PG11 PG13 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000dde:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df0:	230b      	movs	r3, #11
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <MX_GPIO_Init+0x188>)
 8000dfc:	f000 fe26 	bl	8001a4c <HAL_GPIO_Init>
}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020800 	.word	0x58020800
 8000e10:	58020000 	.word	0x58020000
 8000e14:	58020400 	.word	0x58020400
 8000e18:	58021800 	.word	0x58021800

08000e1c <init>:

/* USER CODE BEGIN 4 */
void init() {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    x0 = 1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <init+0x38>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
    start = 0;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <init+0x3c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
    mv = 0;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <init+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
    action = 0;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <init+0x44>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
    getBall = 0;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <init+0x48>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
    throwInit = 0;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
    throwBall = 0;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	20000164 	.word	0x20000164
 8000e58:	20000204 	.word	0x20000204
 8000e5c:	2000016c 	.word	0x2000016c
 8000e60:	20000174 	.word	0x20000174
 8000e64:	200000d0 	.word	0x200000d0
 8000e68:	20000168 	.word	0x20000168
 8000e6c:	20000170 	.word	0x20000170

08000e70 <grafcet>:

void grafcet() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af02      	add	r7, sp, #8
    if (x0 == 1) {  // 0
 8000e76:	4ba4      	ldr	r3, [pc, #656]	; (8001108 <grafcet+0x298>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d141      	bne.n	8000f02 <grafcet+0x92>
        printf("start or not(y/n): ");
 8000e7e:	48a3      	ldr	r0, [pc, #652]	; (800110c <grafcet+0x29c>)
 8000e80:	f004 ff0c 	bl	8005c9c <iprintf>
        fflush(stdout);
 8000e84:	4ba2      	ldr	r3, [pc, #648]	; (8001110 <grafcet+0x2a0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f004 fd4e 	bl	800592c <fflush>
        while (HAL_OK != HAL_UART_Receive(&huart3, uart3InputBuffer, 1, 100))
 8000e90:	bf00      	nop
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	2201      	movs	r2, #1
 8000e96:	499f      	ldr	r1, [pc, #636]	; (8001114 <grafcet+0x2a4>)
 8000e98:	489f      	ldr	r0, [pc, #636]	; (8001118 <grafcet+0x2a8>)
 8000e9a:	f003 fb89 	bl	80045b0 <HAL_UART_Receive>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f6      	bne.n	8000e92 <grafcet+0x22>
            ;

        char tmp[10];
        snprintf(tmp, "%d", uart3InputBuffer);
 8000ea4:	499d      	ldr	r1, [pc, #628]	; (800111c <grafcet+0x2ac>)
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4a9a      	ldr	r2, [pc, #616]	; (8001114 <grafcet+0x2a4>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 ff81 	bl	8005db4 <sniprintf>
        printf(tmp);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f004 fef0 	bl	8005c9c <iprintf>
        printf("\r\n");
 8000ebc:	4898      	ldr	r0, [pc, #608]	; (8001120 <grafcet+0x2b0>)
 8000ebe:	f004 ff61 	bl	8005d84 <puts>
        fflush(stdout);
 8000ec2:	4b93      	ldr	r3, [pc, #588]	; (8001110 <grafcet+0x2a0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 fd2f 	bl	800592c <fflush>
        if (strcmp(tmp, "y") == 0) {
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4994      	ldr	r1, [pc, #592]	; (8001124 <grafcet+0x2b4>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa03 	bl	80002e0 <strcmp>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 8237 	bne.w	8001350 <grafcet+0x4e0>
            printf("program started\r\n");
 8000ee2:	4891      	ldr	r0, [pc, #580]	; (8001128 <grafcet+0x2b8>)
 8000ee4:	f004 ff4e 	bl	8005d84 <puts>
            fflush(stdout);
 8000ee8:	4b89      	ldr	r3, [pc, #548]	; (8001110 <grafcet+0x2a0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fd1c 	bl	800592c <fflush>
            start = 1, x0 = 0;
 8000ef4:	4b8d      	ldr	r3, [pc, #564]	; (800112c <grafcet+0x2bc>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	4b83      	ldr	r3, [pc, #524]	; (8001108 <grafcet+0x298>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]

        printf("完成throw the ball\r\n");
        fflush(stdout);
        x0 = 1, throwBall = 0;
    }
}
 8000f00:	e226      	b.n	8001350 <grafcet+0x4e0>
    } else if (start == 1) {  // 1
 8000f02:	4b8a      	ldr	r3, [pc, #552]	; (800112c <grafcet+0x2bc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d133      	bne.n	8000f72 <grafcet+0x102>
        printf("夾子移動成功\r\n");
 8000f0a:	4889      	ldr	r0, [pc, #548]	; (8001130 <grafcet+0x2c0>)
 8000f0c:	f004 ff3a 	bl	8005d84 <puts>
        fflush(stdout);
 8000f10:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <grafcet+0x2a0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fd08 	bl	800592c <fflush>
        servo_pwm_list[0] = 1500;
 8000f1c:	4b85      	ldr	r3, [pc, #532]	; (8001134 <grafcet+0x2c4>)
 8000f1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f22:	601a      	str	r2, [r3, #0]
        servo_pwm_list[1] = 1700;
 8000f24:	4b83      	ldr	r3, [pc, #524]	; (8001134 <grafcet+0x2c4>)
 8000f26:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000f2a:	605a      	str	r2, [r3, #4]
        servo_pwm_list[2] = 800;
 8000f2c:	4b81      	ldr	r3, [pc, #516]	; (8001134 <grafcet+0x2c4>)
 8000f2e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f32:	609a      	str	r2, [r3, #8]
        servo_pwm_list[3] = 1500;
 8000f34:	4b7f      	ldr	r3, [pc, #508]	; (8001134 <grafcet+0x2c4>)
 8000f36:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f3a:	60da      	str	r2, [r3, #12]
        servo_pwm_list[4] = 2300;
 8000f3c:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <grafcet+0x2c4>)
 8000f3e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000f42:	611a      	str	r2, [r3, #16]
        servo_pwm_list[5] = 950;
 8000f44:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <grafcet+0x2c4>)
 8000f46:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000f4a:	615a      	str	r2, [r3, #20]
        robot_control_cmd(&huart2, 6, 1000, servo_list, servo_pwm_list);
 8000f4c:	4b79      	ldr	r3, [pc, #484]	; (8001134 <grafcet+0x2c4>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4b79      	ldr	r3, [pc, #484]	; (8001138 <grafcet+0x2c8>)
 8000f52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f56:	2106      	movs	r1, #6
 8000f58:	4878      	ldr	r0, [pc, #480]	; (800113c <grafcet+0x2cc>)
 8000f5a:	f7ff fc69 	bl	8000830 <robot_control_cmd>
        wsc = 0;
 8000f5e:	4b78      	ldr	r3, [pc, #480]	; (8001140 <grafcet+0x2d0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
        mv = 1, start = 0;
 8000f64:	4b77      	ldr	r3, [pc, #476]	; (8001144 <grafcet+0x2d4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	4b70      	ldr	r3, [pc, #448]	; (800112c <grafcet+0x2bc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	e1ee      	b.n	8001350 <grafcet+0x4e0>
    } else if (mv == 1) {  // 2
 8000f72:	4b74      	ldr	r3, [pc, #464]	; (8001144 <grafcet+0x2d4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d138      	bne.n	8000fec <grafcet+0x17c>
        printf("接收從電腦指令(w/s/a/d/space): ");
 8000f7a:	4873      	ldr	r0, [pc, #460]	; (8001148 <grafcet+0x2d8>)
 8000f7c:	f004 fe8e 	bl	8005c9c <iprintf>
        fflush(stdout);
 8000f80:	4b63      	ldr	r3, [pc, #396]	; (8001110 <grafcet+0x2a0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fcd0 	bl	800592c <fflush>
        while (HAL_OK != HAL_UART_Receive(&huart3, uart3InputBuffer, 1, 100))
 8000f8c:	bf00      	nop
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	2201      	movs	r2, #1
 8000f92:	4960      	ldr	r1, [pc, #384]	; (8001114 <grafcet+0x2a4>)
 8000f94:	4860      	ldr	r0, [pc, #384]	; (8001118 <grafcet+0x2a8>)
 8000f96:	f003 fb0b 	bl	80045b0 <HAL_UART_Receive>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f6      	bne.n	8000f8e <grafcet+0x11e>
        snprintf(tmp, "%d", uart3InputBuffer);
 8000fa0:	495e      	ldr	r1, [pc, #376]	; (800111c <grafcet+0x2ac>)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4a5b      	ldr	r2, [pc, #364]	; (8001114 <grafcet+0x2a4>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 ff04 	bl	8005db4 <sniprintf>
        printf(tmp);
 8000fac:	463b      	mov	r3, r7
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 fe74 	bl	8005c9c <iprintf>
        printf("\r\n");
 8000fb4:	485a      	ldr	r0, [pc, #360]	; (8001120 <grafcet+0x2b0>)
 8000fb6:	f004 fee5 	bl	8005d84 <puts>
        fflush(stdout);
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <grafcet+0x2a0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fcb3 	bl	800592c <fflush>
        command = tmp[0];
 8000fc6:	783a      	ldrb	r2, [r7, #0]
 8000fc8:	4b60      	ldr	r3, [pc, #384]	; (800114c <grafcet+0x2dc>)
 8000fca:	701a      	strb	r2, [r3, #0]
        printf("接收電腦指令成功\r\n");
 8000fcc:	4860      	ldr	r0, [pc, #384]	; (8001150 <grafcet+0x2e0>)
 8000fce:	f004 fed9 	bl	8005d84 <puts>
        fflush(stdout);
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <grafcet+0x2a0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fca7 	bl	800592c <fflush>
        action = 1, mv = 0;
 8000fde:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <grafcet+0x2e4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	4b57      	ldr	r3, [pc, #348]	; (8001144 <grafcet+0x2d4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	e1b1      	b.n	8001350 <grafcet+0x4e0>
    } else if (action == 1) {  // 3
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <grafcet+0x2e4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f040 80d7 	bne.w	80011a4 <grafcet+0x334>
        switch (command) {
 8000ff6:	4b55      	ldr	r3, [pc, #340]	; (800114c <grafcet+0x2dc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d06e      	beq.n	80010dc <grafcet+0x26c>
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	dc04      	bgt.n	800100c <grafcet+0x19c>
 8001002:	2b20      	cmp	r3, #32
 8001004:	d007      	beq.n	8001016 <grafcet+0x1a6>
 8001006:	2b61      	cmp	r3, #97	; 0x61
 8001008:	d053      	beq.n	80010b2 <grafcet+0x242>
 800100a:	e0b1      	b.n	8001170 <grafcet+0x300>
 800100c:	2b73      	cmp	r3, #115	; 0x73
 800100e:	d031      	beq.n	8001074 <grafcet+0x204>
 8001010:	2b77      	cmp	r3, #119	; 0x77
 8001012:	d010      	beq.n	8001036 <grafcet+0x1c6>
 8001014:	e0ac      	b.n	8001170 <grafcet+0x300>
                printf("detect space pressed\r\n");
 8001016:	4850      	ldr	r0, [pc, #320]	; (8001158 <grafcet+0x2e8>)
 8001018:	f004 feb4 	bl	8005d84 <puts>
                fflush(stdout);
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <grafcet+0x2a0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fc82 	bl	800592c <fflush>
                getBall = 1, action = 0;
 8001028:	4b4c      	ldr	r3, [pc, #304]	; (800115c <grafcet+0x2ec>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4b49      	ldr	r3, [pc, #292]	; (8001154 <grafcet+0x2e4>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
                break;
 8001034:	e0ac      	b.n	8001190 <grafcet+0x320>
                wsc++;
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <grafcet+0x2d0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a40      	ldr	r2, [pc, #256]	; (8001140 <grafcet+0x2d0>)
 800103e:	6013      	str	r3, [r2, #0]
                printf("complete forward\r\n");
 8001040:	4847      	ldr	r0, [pc, #284]	; (8001160 <grafcet+0x2f0>)
 8001042:	f004 fe9f 	bl	8005d84 <puts>
                fflush(stdout);
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <grafcet+0x2a0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fc6d 	bl	800592c <fflush>
                servo_pwm_list[1] += 50;
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <grafcet+0x2c4>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	3332      	adds	r3, #50	; 0x32
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <grafcet+0x2c4>)
 800105a:	6053      	str	r3, [r2, #4]
                servo_pwm_list[2] += 100;
 800105c:	4b35      	ldr	r3, [pc, #212]	; (8001134 <grafcet+0x2c4>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	3364      	adds	r3, #100	; 0x64
 8001062:	4a34      	ldr	r2, [pc, #208]	; (8001134 <grafcet+0x2c4>)
 8001064:	6093      	str	r3, [r2, #8]
                mv = 1, action = 0;
 8001066:	4b37      	ldr	r3, [pc, #220]	; (8001144 <grafcet+0x2d4>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	4b39      	ldr	r3, [pc, #228]	; (8001154 <grafcet+0x2e4>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
                break;
 8001072:	e08d      	b.n	8001190 <grafcet+0x320>
                wsc--;
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <grafcet+0x2d0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a31      	ldr	r2, [pc, #196]	; (8001140 <grafcet+0x2d0>)
 800107c:	6013      	str	r3, [r2, #0]
                printf("complete backward\r\n");
 800107e:	4839      	ldr	r0, [pc, #228]	; (8001164 <grafcet+0x2f4>)
 8001080:	f004 fe80 	bl	8005d84 <puts>
                fflush(stdout);
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <grafcet+0x2a0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fc4e 	bl	800592c <fflush>
                servo_pwm_list[1] -= 50;
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <grafcet+0x2c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	3b32      	subs	r3, #50	; 0x32
 8001096:	4a27      	ldr	r2, [pc, #156]	; (8001134 <grafcet+0x2c4>)
 8001098:	6053      	str	r3, [r2, #4]
                servo_pwm_list[2] -= 100;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <grafcet+0x2c4>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	3b64      	subs	r3, #100	; 0x64
 80010a0:	4a24      	ldr	r2, [pc, #144]	; (8001134 <grafcet+0x2c4>)
 80010a2:	6093      	str	r3, [r2, #8]
                mv = 1, action = 0;
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <grafcet+0x2d4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <grafcet+0x2e4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
                break;
 80010b0:	e06e      	b.n	8001190 <grafcet+0x320>
                printf("complete left\r\n");
 80010b2:	482d      	ldr	r0, [pc, #180]	; (8001168 <grafcet+0x2f8>)
 80010b4:	f004 fe66 	bl	8005d84 <puts>
                fflush(stdout);
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <grafcet+0x2a0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 fc34 	bl	800592c <fflush>
                servo_pwm_list[0] += 100;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <grafcet+0x2c4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3364      	adds	r3, #100	; 0x64
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <grafcet+0x2c4>)
 80010cc:	6013      	str	r3, [r2, #0]
                mv = 1, action = 0;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <grafcet+0x2d4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <grafcet+0x2e4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
                break;
 80010da:	e059      	b.n	8001190 <grafcet+0x320>
                printf("complete right\r\n");
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <grafcet+0x2fc>)
 80010de:	f004 fe51 	bl	8005d84 <puts>
                fflush(stdout);
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <grafcet+0x2a0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 fc1f 	bl	800592c <fflush>
                servo_pwm_list[0] -= 100;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <grafcet+0x2c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3b64      	subs	r3, #100	; 0x64
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <grafcet+0x2c4>)
 80010f6:	6013      	str	r3, [r2, #0]
                mv = 1, action = 0;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <grafcet+0x2d4>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <grafcet+0x2e4>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
                break;
 8001104:	e044      	b.n	8001190 <grafcet+0x320>
 8001106:	bf00      	nop
 8001108:	20000164 	.word	0x20000164
 800110c:	08006ae0 	.word	0x08006ae0
 8001110:	20000040 	.word	0x20000040
 8001114:	20000208 	.word	0x20000208
 8001118:	200000d4 	.word	0x200000d4
 800111c:	08006af4 	.word	0x08006af4
 8001120:	08006af8 	.word	0x08006af8
 8001124:	08006afc 	.word	0x08006afc
 8001128:	08006b00 	.word	0x08006b00
 800112c:	20000204 	.word	0x20000204
 8001130:	08006b14 	.word	0x08006b14
 8001134:	20000020 	.word	0x20000020
 8001138:	20000008 	.word	0x20000008
 800113c:	20000178 	.word	0x20000178
 8001140:	200000cc 	.word	0x200000cc
 8001144:	2000016c 	.word	0x2000016c
 8001148:	08006b28 	.word	0x08006b28
 800114c:	20000160 	.word	0x20000160
 8001150:	08006b50 	.word	0x08006b50
 8001154:	20000174 	.word	0x20000174
 8001158:	08006b6c 	.word	0x08006b6c
 800115c:	200000d0 	.word	0x200000d0
 8001160:	08006b84 	.word	0x08006b84
 8001164:	08006b98 	.word	0x08006b98
 8001168:	08006bac 	.word	0x08006bac
 800116c:	08006bbc 	.word	0x08006bbc
                printf("nothing done\r\n");
 8001170:	4879      	ldr	r0, [pc, #484]	; (8001358 <grafcet+0x4e8>)
 8001172:	f004 fe07 	bl	8005d84 <puts>
                fflush(stdout);
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <grafcet+0x4ec>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fbd5 	bl	800592c <fflush>
                mv = 1, action = 0;
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <grafcet+0x4f0>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	4b76      	ldr	r3, [pc, #472]	; (8001364 <grafcet+0x4f4>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
                break;
 800118e:	bf00      	nop
        robot_control_cmd(&huart2, 6, 1000, servo_list, servo_pwm_list);
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <grafcet+0x4f8>)
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <grafcet+0x4fc>)
 8001196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119a:	2106      	movs	r1, #6
 800119c:	4874      	ldr	r0, [pc, #464]	; (8001370 <grafcet+0x500>)
 800119e:	f7ff fb47 	bl	8000830 <robot_control_cmd>
}
 80011a2:	e0d5      	b.n	8001350 <grafcet+0x4e0>
    } else if (getBall == 1) {  // 4
 80011a4:	4b73      	ldr	r3, [pc, #460]	; (8001374 <grafcet+0x504>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d169      	bne.n	8001280 <grafcet+0x410>
        printf("完成take up the ball\r\n");
 80011ac:	4872      	ldr	r0, [pc, #456]	; (8001378 <grafcet+0x508>)
 80011ae:	f004 fde9 	bl	8005d84 <puts>
        fflush(stdout);
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <grafcet+0x4ec>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fbb7 	bl	800592c <fflush>
        servo_pwm_list[1] -= 100 + ((wsc > 0) ? (wsc * -50) : ((int)(wsc / 2) * 50));
 80011be:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <grafcet+0x4f8>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4b6e      	ldr	r3, [pc, #440]	; (800137c <grafcet+0x50c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	dd07      	ble.n	80011da <grafcet+0x36a>
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <grafcet+0x50c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f06f 0131 	mvn.w	r1, #49	; 0x31
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	3364      	adds	r3, #100	; 0x64
 80011d8:	e00a      	b.n	80011f0 <grafcet+0x380>
 80011da:	4b68      	ldr	r3, [pc, #416]	; (800137c <grafcet+0x50c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da00      	bge.n	80011e4 <grafcet+0x374>
 80011e2:	3301      	adds	r3, #1
 80011e4:	105b      	asrs	r3, r3, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	2332      	movs	r3, #50	; 0x32
 80011ea:	fb03 f301 	mul.w	r3, r3, r1
 80011ee:	3364      	adds	r3, #100	; 0x64
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4a5d      	ldr	r2, [pc, #372]	; (8001368 <grafcet+0x4f8>)
 80011f4:	6053      	str	r3, [r2, #4]
        servo_pwm_list[2] = (servo_pwm_list[2] - 300) < 400 ? 400 : (servo_pwm_list[2] - 300);
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <grafcet+0x4f8>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001202:	bf38      	it	cc
 8001204:	f44f 73c8 	movcc.w	r3, #400	; 0x190
 8001208:	4a57      	ldr	r2, [pc, #348]	; (8001368 <grafcet+0x4f8>)
 800120a:	6093      	str	r3, [r2, #8]
        servo_pwm_list[3] += 350 + ((wsc > 0) ? (wsc * -50) : (wsc * 100));
 800120c:	4b56      	ldr	r3, [pc, #344]	; (8001368 <grafcet+0x4f8>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a5a      	ldr	r2, [pc, #360]	; (800137c <grafcet+0x50c>)
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	2a00      	cmp	r2, #0
 8001216:	dd08      	ble.n	800122a <grafcet+0x3ba>
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <grafcet+0x50c>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8001220:	fb01 f202 	mul.w	r2, r1, r2
 8001224:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 8001228:	e006      	b.n	8001238 <grafcet+0x3c8>
 800122a:	4a54      	ldr	r2, [pc, #336]	; (800137c <grafcet+0x50c>)
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	2164      	movs	r1, #100	; 0x64
 8001230:	fb01 f202 	mul.w	r2, r1, r2
 8001234:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 8001238:	4413      	add	r3, r2
 800123a:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <grafcet+0x4f8>)
 800123c:	60d3      	str	r3, [r2, #12]
        robot_control_cmd(&huart2, 6, 1000, servo_list, servo_pwm_list);
 800123e:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <grafcet+0x4f8>)
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <grafcet+0x4fc>)
 8001244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001248:	2106      	movs	r1, #6
 800124a:	4849      	ldr	r0, [pc, #292]	; (8001370 <grafcet+0x500>)
 800124c:	f7ff faf0 	bl	8000830 <robot_control_cmd>
        servo_pwm_list[5] = 1700;
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <grafcet+0x4f8>)
 8001252:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001256:	615a      	str	r2, [r3, #20]
        robot_control_cmd(&huart2, 6, 1000, servo_list, servo_pwm_list);
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <grafcet+0x4f8>)
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <grafcet+0x4fc>)
 800125e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001262:	2106      	movs	r1, #6
 8001264:	4842      	ldr	r0, [pc, #264]	; (8001370 <grafcet+0x500>)
 8001266:	f7ff fae3 	bl	8000830 <robot_control_cmd>
        HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f000 fadb 	bl	8001828 <HAL_Delay>
        throwInit = 1, getBall = 0;
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <grafcet+0x510>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <grafcet+0x504>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	e067      	b.n	8001350 <grafcet+0x4e0>
    } else if (throwInit == 1) {                          // 5
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <grafcet+0x510>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d130      	bne.n	80012ea <grafcet+0x47a>
        printf("完成move the ball to 投球預備位置\r\n");  // print 每個字有100 delay
 8001288:	483e      	ldr	r0, [pc, #248]	; (8001384 <grafcet+0x514>)
 800128a:	f004 fd7b 	bl	8005d84 <puts>
        fflush(stdout);
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <grafcet+0x4ec>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fb49 	bl	800592c <fflush>
        servo_pwm_list[0] = 1500;
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <grafcet+0x4f8>)
 800129c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012a0:	601a      	str	r2, [r3, #0]
        servo_pwm_list[1] = 1700;
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <grafcet+0x4f8>)
 80012a4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80012a8:	605a      	str	r2, [r3, #4]
        servo_pwm_list[2] = 2000;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <grafcet+0x4f8>)
 80012ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012b0:	609a      	str	r2, [r3, #8]
        servo_pwm_list[3] = 1500;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <grafcet+0x4f8>)
 80012b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012b8:	60da      	str	r2, [r3, #12]
        servo_pwm_list[4] = 2300;
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <grafcet+0x4f8>)
 80012bc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80012c0:	611a      	str	r2, [r3, #16]
        servo_pwm_list[5] = 2500;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <grafcet+0x4f8>)
 80012c4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012c8:	615a      	str	r2, [r3, #20]
        robot_control_cmd(&huart2, 6, 500, servo_list, servo_pwm_list);
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <grafcet+0x4f8>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <grafcet+0x4fc>)
 80012d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012d4:	2106      	movs	r1, #6
 80012d6:	4826      	ldr	r0, [pc, #152]	; (8001370 <grafcet+0x500>)
 80012d8:	f7ff faaa 	bl	8000830 <robot_control_cmd>
        throwBall = 1, throwInit = 0;
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <grafcet+0x518>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <grafcet+0x510>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	e032      	b.n	8001350 <grafcet+0x4e0>
    } else if (throwBall == 1) {  // 6
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <grafcet+0x518>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d12e      	bne.n	8001350 <grafcet+0x4e0>
        servo_pwm_list[0] = 1500;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <grafcet+0x4f8>)
 80012f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012f8:	601a      	str	r2, [r3, #0]
        servo_pwm_list[1] = 1400;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <grafcet+0x4f8>)
 80012fc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001300:	605a      	str	r2, [r3, #4]
        servo_pwm_list[2] = 2000;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <grafcet+0x4f8>)
 8001304:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001308:	609a      	str	r2, [r3, #8]
        servo_pwm_list[3] = 2100;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <grafcet+0x4f8>)
 800130c:	f640 0234 	movw	r2, #2100	; 0x834
 8001310:	60da      	str	r2, [r3, #12]
        servo_pwm_list[4] = 2500;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <grafcet+0x4f8>)
 8001314:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001318:	611a      	str	r2, [r3, #16]
        servo_pwm_list[5] = 950;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <grafcet+0x4f8>)
 800131c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001320:	615a      	str	r2, [r3, #20]
        robot_control_cmd(&huart2, 6, 200, servo_list, servo_pwm_list);
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <grafcet+0x4f8>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <grafcet+0x4fc>)
 8001328:	22c8      	movs	r2, #200	; 0xc8
 800132a:	2106      	movs	r1, #6
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <grafcet+0x500>)
 800132e:	f7ff fa7f 	bl	8000830 <robot_control_cmd>
        printf("完成throw the ball\r\n");
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <grafcet+0x51c>)
 8001334:	f004 fd26 	bl	8005d84 <puts>
        fflush(stdout);
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <grafcet+0x4ec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4618      	mov	r0, r3
 8001340:	f004 faf4 	bl	800592c <fflush>
        x0 = 1, throwBall = 0;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <grafcet+0x520>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <grafcet+0x518>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08006bcc 	.word	0x08006bcc
 800135c:	20000040 	.word	0x20000040
 8001360:	2000016c 	.word	0x2000016c
 8001364:	20000174 	.word	0x20000174
 8001368:	20000020 	.word	0x20000020
 800136c:	20000008 	.word	0x20000008
 8001370:	20000178 	.word	0x20000178
 8001374:	200000d0 	.word	0x200000d0
 8001378:	08006bdc 	.word	0x08006bdc
 800137c:	200000cc 	.word	0x200000cc
 8001380:	20000168 	.word	0x20000168
 8001384:	08006bf4 	.word	0x08006bf4
 8001388:	20000170 	.word	0x20000170
 800138c:	08006c20 	.word	0x08006c20
 8001390:	20000164 	.word	0x20000164

08001394 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800139a:	e7fe      	b.n	800139a <Error_Handler+0x6>

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x30>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x30>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x30>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	58024400 	.word	0x58024400

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a44      	ldr	r2, [pc, #272]	; (8001500 <HAL_UART_MspInit+0x130>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d14d      	bne.n	800148e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_UART_MspInit+0x134>)
 80013f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f8:	4a42      	ldr	r2, [pc, #264]	; (8001504 <HAL_UART_MspInit+0x134>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	4a3b      	ldr	r2, [pc, #236]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	4a33      	ldr	r2, [pc, #204]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800144c:	2308      	movs	r3, #8
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145c:	2307      	movs	r3, #7
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4828      	ldr	r0, [pc, #160]	; (8001508 <HAL_UART_MspInit+0x138>)
 8001468:	f000 faf0 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800146c:	2320      	movs	r3, #32
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147c:	2307      	movs	r3, #7
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <HAL_UART_MspInit+0x13c>)
 8001488:	f000 fae0 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800148c:	e033      	b.n	80014f6 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <HAL_UART_MspInit+0x140>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d12e      	bne.n	80014f6 <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_UART_MspInit+0x134>)
 800149a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800149e:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e6:	2307      	movs	r3, #7
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <HAL_UART_MspInit+0x13c>)
 80014f2:	f000 faab 	bl	8001a4c <HAL_GPIO_Init>
}
 80014f6:	bf00      	nop
 80014f8:	3730      	adds	r7, #48	; 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004400 	.word	0x40004400
 8001504:	58024400 	.word	0x58024400
 8001508:	58020000 	.word	0x58020000
 800150c:	58020c00 	.word	0x58020c00
 8001510:	40004800 	.word	0x40004800

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f942 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e00a      	b.n	8001590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800157a:	f7ff f9eb 	bl	8000954 <__io_getchar>
 800157e:	4601      	mov	r1, r0
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	b2ca      	uxtb	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf0      	blt.n	800157a <_read+0x12>
	}

return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e009      	b.n	80015c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f9b7 	bl	8000930 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf1      	blt.n	80015b4 <_write+0x12>
	}
	return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_close>:

int _close(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	return -1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001602:	605a      	str	r2, [r3, #4]
	return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_isatty>:

int _isatty(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return 1;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f004 f8a4 	bl	80057c0 <__errno>
 8001678:	4602      	mov	r2, r0
 800167a:	230c      	movs	r3, #12
 800167c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20020000 	.word	0x20020000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	200000c0 	.word	0x200000c0
 80016ac:	20000220 	.word	0x20000220

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016b4:	f7fe fff4 	bl	80006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
  ldr  r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80016da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80016de:	f004 fa01 	bl	8005ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff f94b 	bl	800097c <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016ec:	08006d18 	.word	0x08006d18
  ldr  r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016f4:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80016f8:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 80016fc:	2000021c 	.word	0x2000021c

08001700 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC3_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f96c 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001710:	f001 f99a 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8001714:	4601      	mov	r1, r0
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_Init+0x68>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_Init+0x6c>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	fa21 f303 	lsr.w	r3, r1, r3
 800172c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_Init+0x68>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_Init+0x6c>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_Init+0x70>)
 8001746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_Init+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f814 	bl	800177c <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e002      	b.n	8001764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800175e:	f7ff fe1d 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400
 8001770:	08006c48 	.word	0x08006c48
 8001774:	20000004 	.word	0x20000004
 8001778:	20000000 	.word	0x20000000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_InitTick+0x60>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e021      	b.n	80017d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_InitTick+0x64>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_InitTick+0x60>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f943 	bl	8001a32 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 f91b 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_InitTick+0x68>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000003c 	.word	0x2000003c
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000038 	.word	0x20000038

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000003c 	.word	0x2000003c
 800180c:	20000214 	.word	0x20000214

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000214 	.word	0x20000214

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_Delay+0x40>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000003c 	.word	0x2000003c

0800186c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetREVID+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0c1b      	lsrs	r3, r3, #16
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	5c001000 	.word	0x5c001000

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	05fa0000 	.word	0x05fa0000

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff47 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff5e 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff90 	bl	800193c <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5f 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffb2 	bl	80019a4 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_GPIO_Init+0x234>)
 8001a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a5e:	e194      	b.n	8001d8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8186 	beq.w	8001d84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d00b      	beq.n	8001a98 <HAL_GPIO_Init+0x4c>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a8c:	2b11      	cmp	r3, #17
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b12      	cmp	r3, #18
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0201 	and.w	r2, r3, #1
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0xee>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d123      	bne.n	8001b82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0203 	and.w	r2, r3, #3
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80e0 	beq.w	8001d84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x238>)
 8001bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bca:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x238>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_GPIO_Init+0x238>)
 8001bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_GPIO_Init+0x23c>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_GPIO_Init+0x240>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d052      	beq.n	8001cb4 <HAL_GPIO_Init+0x268>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <HAL_GPIO_Init+0x244>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_GPIO_Init+0x22e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_GPIO_Init+0x248>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x22a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_GPIO_Init+0x24c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x226>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_GPIO_Init+0x250>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x222>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_GPIO_Init+0x254>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x21e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1a      	ldr	r2, [pc, #104]	; (8001ca4 <HAL_GPIO_Init+0x258>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x21a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_GPIO_Init+0x25c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x216>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x260>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x212>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_GPIO_Init+0x264>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x20e>
 8001c56:	2309      	movs	r3, #9
 8001c58:	e02d      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	e02b      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e029      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e027      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e025      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e023      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e021      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e01f      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e01d      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e01b      	b.n	8001cb6 <HAL_GPIO_Init+0x26a>
 8001c7e:	bf00      	nop
 8001c80:	58000080 	.word	0x58000080
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58000400 	.word	0x58000400
 8001c8c:	58020000 	.word	0x58020000
 8001c90:	58020400 	.word	0x58020400
 8001c94:	58020800 	.word	0x58020800
 8001c98:	58020c00 	.word	0x58020c00
 8001c9c:	58021000 	.word	0x58021000
 8001ca0:	58021400 	.word	0x58021400
 8001ca4:	58021800 	.word	0x58021800
 8001ca8:	58021c00 	.word	0x58021c00
 8001cac:	58022000 	.word	0x58022000
 8001cb0:	58022400 	.word	0x58022400
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc6:	4938      	ldr	r1, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x35c>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f ae63 	bne.w	8001a60 <HAL_GPIO_Init+0x14>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	58000400 	.word	0x58000400

08001dac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_HSEM_FastTake+0x2c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3320      	adds	r3, #32
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_HSEM_FastTake+0x30>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	58026400 	.word	0x58026400
 8001ddc:	80000300 	.word	0x80000300

08001de0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001dea:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_HSEM_Release+0x24>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	58026400 	.word	0x58026400

08001e08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	2b06      	cmp	r3, #6
 8001e1a:	d00a      	beq.n	8001e32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e040      	b.n	8001eb0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e03e      	b.n	8001eb0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e3a:	491f      	ldr	r1, [pc, #124]	; (8001eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e42:	f7ff fce5 	bl	8001810 <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e48:	e009      	b.n	8001e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e4a:	f7ff fce1 	bl	8001810 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d901      	bls.n	8001e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e028      	b.n	8001eb0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b1e      	cmp	r3, #30
 8001e70:	d008      	beq.n	8001e84 <HAL_PWREx_ConfigSupply+0x7c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b2e      	cmp	r3, #46	; 0x2e
 8001e76:	d005      	beq.n	8001e84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b1d      	cmp	r3, #29
 8001e7c:	d002      	beq.n	8001e84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b2d      	cmp	r3, #45	; 0x2d
 8001e82:	d114      	bne.n	8001eae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001e84:	f7ff fcc4 	bl	8001810 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e8a:	e009      	b.n	8001ea0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e8c:	f7ff fcc0 	bl	8001810 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e9a:	d901      	bls.n	8001ea0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d1ee      	bne.n	8001e8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58024800 	.word	0x58024800

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e3ff      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8087 	beq.w	8001fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001edc:	4b99      	ldr	r3, [pc, #612]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d007      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46>
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	2b18      	cmp	r3, #24
 8001ef6:	d110      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b90      	ldr	r3, [pc, #576]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d06c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d168      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e3d9      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x76>
 8001f24:	4b87      	ldr	r3, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a86      	ldr	r2, [pc, #536]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e02e      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a81      	ldr	r2, [pc, #516]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0xbc>
 8001f5e:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a78      	ldr	r2, [pc, #480]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a75      	ldr	r2, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f78:	4b72      	ldr	r3, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a71      	ldr	r2, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff fc3a 	bl	8001810 <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fc36 	bl	8001810 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e38d      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fb2:	4b64      	ldr	r3, [pc, #400]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe4>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc26 	bl	8001810 <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fc22 	bl	8001810 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e379      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fda:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x10c>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80ae 	beq.w	8002154 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002000:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_RCC_OscConfig+0x162>
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2b18      	cmp	r3, #24
 8002012:	d13a      	bne.n	800208a <HAL_RCC_OscConfig+0x1ce>
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d135      	bne.n	800208a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x17a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e34b      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	f7ff fc19 	bl	800186c <HAL_GetREVID>
 800203a:	4602      	mov	r2, r0
 800203c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002040:	429a      	cmp	r2, r3
 8002042:	d817      	bhi.n	8002074 <HAL_RCC_OscConfig+0x1b8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d108      	bne.n	800205e <HAL_RCC_OscConfig+0x1a2>
 800204c:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002054:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205c:	e07a      	b.n	8002154 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002072:	e06f      	b.n	8002154 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	4930      	ldr	r1, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002088:	e064      	b.n	8002154 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d045      	beq.n	800211e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0219 	bic.w	r2, r3, #25
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4929      	ldr	r1, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fbb4 	bl	8001810 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff fbb0 	bl	8001810 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e307      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	f7ff fbcf 	bl	800186c <HAL_GetREVID>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d817      	bhi.n	8002108 <HAL_RCC_OscConfig+0x24c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d108      	bne.n	80020f2 <HAL_RCC_OscConfig+0x236>
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 80020ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ee:	6053      	str	r3, [r2, #4]
 80020f0:	e030      	b.n	8002154 <HAL_RCC_OscConfig+0x298>
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	031b      	lsls	r3, r3, #12
 8002100:	4910      	ldr	r1, [pc, #64]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
 8002106:	e025      	b.n	8002154 <HAL_RCC_OscConfig+0x298>
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	490b      	ldr	r1, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e01a      	b.n	8002154 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_RCC_OscConfig+0x288>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff fb71 	bl	8001810 <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff fb6d 	bl	8001810 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d903      	bls.n	8002148 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2c4      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
 8002144:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002148:	4ba4      	ldr	r3, [pc, #656]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a9 	beq.w	80022b4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b9e      	ldr	r3, [pc, #632]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800216a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800216c:	4b9b      	ldr	r3, [pc, #620]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d007      	beq.n	8002188 <HAL_RCC_OscConfig+0x2cc>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b18      	cmp	r3, #24
 800217c:	d13a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x338>
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d135      	bne.n	80021f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002188:	4b94      	ldr	r3, [pc, #592]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2e4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e296      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021a0:	f7ff fb64 	bl	800186c <HAL_GetREVID>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d817      	bhi.n	80021de <HAL_RCC_OscConfig+0x322>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d108      	bne.n	80021c8 <HAL_RCC_OscConfig+0x30c>
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80021be:	4a87      	ldr	r2, [pc, #540]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021c6:	e075      	b.n	80022b4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021c8:	4b84      	ldr	r3, [pc, #528]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	069b      	lsls	r3, r3, #26
 80021d6:	4981      	ldr	r1, [pc, #516]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021dc:	e06a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021de:	4b7f      	ldr	r3, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	497b      	ldr	r1, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021f2:	e05f      	b.n	80022b4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d042      	beq.n	8002282 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021fc:	4b77      	ldr	r3, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a76      	ldr	r2, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fb02 	bl	8001810 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002210:	f7ff fafe 	bl	8001810 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e255      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800222e:	f7ff fb1d 	bl	800186c <HAL_GetREVID>
 8002232:	4602      	mov	r2, r0
 8002234:	f241 0303 	movw	r3, #4099	; 0x1003
 8002238:	429a      	cmp	r2, r3
 800223a:	d817      	bhi.n	800226c <HAL_RCC_OscConfig+0x3b0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	2b20      	cmp	r3, #32
 8002242:	d108      	bne.n	8002256 <HAL_RCC_OscConfig+0x39a>
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800224c:	4a63      	ldr	r2, [pc, #396]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800224e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002252:	6053      	str	r3, [r2, #4]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0x3f8>
 8002256:	4b61      	ldr	r3, [pc, #388]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	069b      	lsls	r3, r3, #26
 8002264:	495d      	ldr	r1, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
 800226a:	e023      	b.n	80022b4 <HAL_RCC_OscConfig+0x3f8>
 800226c:	4b5b      	ldr	r3, [pc, #364]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	4958      	ldr	r1, [pc, #352]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e018      	b.n	80022b4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002282:	4b56      	ldr	r3, [pc, #344]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a55      	ldr	r2, [pc, #340]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff fabf 	bl	8001810 <HAL_GetTick>
 8002292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002296:	f7ff fabb 	bl	8001810 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e212      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d036      	beq.n	800232e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d019      	beq.n	80022fc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80022ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022cc:	4a43      	ldr	r2, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff fa9c 	bl	8001810 <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff fa98 	bl	8001810 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1ef      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x420>
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fc:	4b37      	ldr	r3, [pc, #220]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 80022fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002300:	4a36      	ldr	r2, [pc, #216]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7ff fa82 	bl	8001810 <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff fa7e 	bl	8001810 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1d5      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d036      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800234e:	f7ff fa5f 	bl	8001810 <HAL_GetTick>
 8002352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002356:	f7ff fa5b 	bl	8001810 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1b2      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x49a>
 8002374:	e018      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800237c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002380:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002382:	f7ff fa45 	bl	8001810 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800238a:	f7ff fa41 	bl	8001810 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e198      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_RCC_OscConfig+0x520>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8085 	beq.w	80024c0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_OscConfig+0x524>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_OscConfig+0x524>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c2:	f7ff fa25 	bl	8001810 <HAL_GetTick>
 80023c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023c8:	e00c      	b.n	80023e4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7ff fa21 	bl	8001810 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d905      	bls.n	80023e4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e178      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
 80023dc:	58024400 	.word	0x58024400
 80023e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023e4:	4b96      	ldr	r3, [pc, #600]	; (8002640 <HAL_RCC_OscConfig+0x784>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ec      	beq.n	80023ca <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x54a>
 80023f8:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a91      	ldr	r2, [pc, #580]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	e02d      	b.n	8002462 <HAL_RCC_OscConfig+0x5a6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x56c>
 800240e:	4b8d      	ldr	r3, [pc, #564]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a8c      	ldr	r2, [pc, #560]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	4b8a      	ldr	r3, [pc, #552]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a89      	ldr	r2, [pc, #548]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
 8002426:	e01c      	b.n	8002462 <HAL_RCC_OscConfig+0x5a6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x58e>
 8002430:	4b84      	ldr	r3, [pc, #528]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a83      	ldr	r2, [pc, #524]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a80      	ldr	r2, [pc, #512]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0x5a6>
 800244a:	4b7e      	ldr	r3, [pc, #504]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a7d      	ldr	r2, [pc, #500]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	4b7b      	ldr	r3, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d015      	beq.n	8002496 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7ff f9d1 	bl	8001810 <HAL_GetTick>
 800246e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7ff f9cd 	bl	8001810 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e122      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002488:	4b6e      	ldr	r3, [pc, #440]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ee      	beq.n	8002472 <HAL_RCC_OscConfig+0x5b6>
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff f9bb 	bl	8001810 <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff f9b7 	bl	8001810 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e10c      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024b4:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8101 	beq.w	80026cc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024ca:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d2:	2b18      	cmp	r3, #24
 80024d4:	f000 80bc 	beq.w	8002650 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f040 8095 	bne.w	800260c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a57      	ldr	r2, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80024e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7ff f98f 	bl	8001810 <HAL_GetTick>
 80024f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff f98b 	bl	8001810 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0e2      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002508:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_RCC_OscConfig+0x78c>)
 800251a:	4013      	ands	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	430a      	orrs	r2, r1
 8002528:	4946      	ldr	r1, [pc, #280]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800252a:	4313      	orrs	r3, r2
 800252c:	628b      	str	r3, [r1, #40]	; 0x28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	3b01      	subs	r3, #1
 8002534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253c:	3b01      	subs	r3, #1
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	b29b      	uxth	r3, r3
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	3b01      	subs	r3, #1
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	3b01      	subs	r3, #1
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800255e:	4939      	ldr	r1, [pc, #228]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002560:	4313      	orrs	r3, r2
 8002562:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002564:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	4a36      	ldr	r2, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_RCC_OscConfig+0x790>)
 8002576:	4013      	ands	r3, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800257c:	00d2      	lsls	r2, r2, #3
 800257e:	4931      	ldr	r1, [pc, #196]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002580:	4313      	orrs	r3, r2
 8002582:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f023 020c 	bic.w	r2, r3, #12
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	492c      	ldr	r1, [pc, #176]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002592:	4313      	orrs	r3, r2
 8002594:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	f023 0202 	bic.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4928      	ldr	r1, [pc, #160]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff f914 	bl	8001810 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff f910 	bl	8001810 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e067      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x730>
 800260a:	e05f      	b.n	80026cc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff f8fa 	bl	8001810 <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f8f6 	bl	8001810 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04d      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_RCC_OscConfig+0x788>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x764>
 800263e:	e045      	b.n	80026cc <HAL_RCC_OscConfig+0x810>
 8002640:	58024800 	.word	0x58024800
 8002644:	58024400 	.word	0x58024400
 8002648:	fffffc0c 	.word	0xfffffc0c
 800264c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_RCC_OscConfig+0x81c>)
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCC_OscConfig+0x81c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2b01      	cmp	r3, #1
 8002662:	d031      	beq.n	80026c8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0203 	and.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d12a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d122      	bne.n	80026c8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d11a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0a5b      	lsrs	r3, r3, #9
 8002696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d111      	bne.n	80026c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d108      	bne.n	80026c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0e1b      	lsrs	r3, r3, #24
 80026ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	58024400 	.word	0x58024400

080026dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e19c      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b8a      	ldr	r3, [pc, #552]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b87      	ldr	r3, [pc, #540]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	4985      	ldr	r1, [pc, #532]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b83      	ldr	r3, [pc, #524]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e184      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002738:	429a      	cmp	r2, r3
 800273a:	d908      	bls.n	800274e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800273c:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4975      	ldr	r1, [pc, #468]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800274a:	4313      	orrs	r3, r2
 800274c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002766:	429a      	cmp	r2, r3
 8002768:	d908      	bls.n	800277c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800276a:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	496a      	ldr	r1, [pc, #424]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002778:	4313      	orrs	r3, r2
 800277a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d010      	beq.n	80027aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002794:	429a      	cmp	r2, r3
 8002796:	d908      	bls.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002798:	4b61      	ldr	r3, [pc, #388]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	495e      	ldr	r1, [pc, #376]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	4b59      	ldr	r3, [pc, #356]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d908      	bls.n	80027d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4953      	ldr	r1, [pc, #332]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4b4d      	ldr	r3, [pc, #308]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d908      	bls.n	8002806 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f023 020f 	bic.w	r2, r3, #15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4947      	ldr	r1, [pc, #284]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002802:	4313      	orrs	r3, r2
 8002804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d055      	beq.n	80028be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002812:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4940      	ldr	r1, [pc, #256]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002820:	4313      	orrs	r3, r2
 8002822:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d121      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0f6      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0ea      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0de      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d6      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800287c:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4925      	ldr	r1, [pc, #148]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe ffbf 	bl	8001810 <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002894:	e00a      	b.n	80028ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002896:	f7fe ffbb 	bl	8001810 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0be      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d1eb      	bne.n	8002896 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d208      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	490e      	ldr	r1, [pc, #56]	; (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d214      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 020f 	bic.w	r2, r3, #15
 8002902:	4906      	ldr	r1, [pc, #24]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e086      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
 800291c:	52002000 	.word	0x52002000
 8002920:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800293c:	429a      	cmp	r2, r3
 800293e:	d208      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	4939      	ldr	r1, [pc, #228]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 800294e:	4313      	orrs	r3, r2
 8002950:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800296a:	429a      	cmp	r2, r3
 800296c:	d208      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	492e      	ldr	r1, [pc, #184]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4922      	ldr	r1, [pc, #136]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d208      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4917      	ldr	r1, [pc, #92]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029dc:	f000 f834 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80029e0:	4601      	mov	r1, r0
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x35c>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa21 f303 	lsr.w	r3, r1, r3
 80029f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HAL_RCC_ClockConfig+0x35c>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x360>)
 8002a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x364>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x368>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe feac 	bl	800177c <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58024400 	.word	0x58024400
 8002a38:	08006c48 	.word	0x08006c48
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000038 	.word	0x20000038

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4e:	4baf      	ldr	r3, [pc, #700]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	f200 814e 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002ac9 	.word	0x08002ac9
 8002a68:	08002cf9 	.word	0x08002cf9
 8002a6c:	08002cf9 	.word	0x08002cf9
 8002a70:	08002cf9 	.word	0x08002cf9
 8002a74:	08002cf9 	.word	0x08002cf9
 8002a78:	08002cf9 	.word	0x08002cf9
 8002a7c:	08002cf9 	.word	0x08002cf9
 8002a80:	08002cf9 	.word	0x08002cf9
 8002a84:	08002aef 	.word	0x08002aef
 8002a88:	08002cf9 	.word	0x08002cf9
 8002a8c:	08002cf9 	.word	0x08002cf9
 8002a90:	08002cf9 	.word	0x08002cf9
 8002a94:	08002cf9 	.word	0x08002cf9
 8002a98:	08002cf9 	.word	0x08002cf9
 8002a9c:	08002cf9 	.word	0x08002cf9
 8002aa0:	08002cf9 	.word	0x08002cf9
 8002aa4:	08002af5 	.word	0x08002af5
 8002aa8:	08002cf9 	.word	0x08002cf9
 8002aac:	08002cf9 	.word	0x08002cf9
 8002ab0:	08002cf9 	.word	0x08002cf9
 8002ab4:	08002cf9 	.word	0x08002cf9
 8002ab8:	08002cf9 	.word	0x08002cf9
 8002abc:	08002cf9 	.word	0x08002cf9
 8002ac0:	08002cf9 	.word	0x08002cf9
 8002ac4:	08002afb 	.word	0x08002afb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac8:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ad4:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	4a8c      	ldr	r2, [pc, #560]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ae6:	e10a      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ae8:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002aea:	61bb      	str	r3, [r7, #24]
    break;
 8002aec:	e107      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002af0:	61bb      	str	r3, [r7, #24]
    break;
 8002af2:	e104      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002af4:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002af6:	61bb      	str	r3, [r7, #24]
    break;
 8002af8:	e101      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002afa:	4b84      	ldr	r3, [pc, #528]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b10:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b1a:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80da 	beq.w	8002cf2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d05a      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x1b2>
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d302      	bcc.n	8002b4e <HAL_RCC_GetSysClockFreq+0x106>
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d078      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x1f6>
 8002b4c:	e099      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d02d      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b98:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002d20 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bdc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002be0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bf8:	e065      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c04:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002d24 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c20:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c3c:	e043      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c48:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002d28 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c50:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c60:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c64:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c80:	e021      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002d24 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ca8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cc4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	0a5b      	lsrs	r3, r3, #9
 8002ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cea:	ee17 3a90 	vmov	r3, s15
 8002cee:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002cf0:	e005      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
    break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002cfa:	61bb      	str	r3, [r7, #24]
    break;
 8002cfc:	bf00      	nop
  }

  return sysclockfreq;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3724      	adds	r7, #36	; 0x24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	03d09000 	.word	0x03d09000
 8002d14:	003d0900 	.word	0x003d0900
 8002d18:	017d7840 	.word	0x017d7840
 8002d1c:	46000000 	.word	0x46000000
 8002d20:	4c742400 	.word	0x4c742400
 8002d24:	4a742400 	.word	0x4a742400
 8002d28:	4bbebc20 	.word	0x4bbebc20

08002d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d32:	f7ff fe89 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002d36:	4601      	mov	r1, r0
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	08006c48 	.word	0x08006c48
 8002d84:	20000004 	.word	0x20000004
 8002d88:	20000000 	.word	0x20000000

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d90:	f7ff ffcc 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d94:	4601      	mov	r1, r0
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	58024400 	.word	0x58024400
 8002db4:	08006c48 	.word	0x08006c48

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002dbc:	f7ff ffb6 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	08006c48 	.word	0x08006c48

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df0:	2300      	movs	r3, #0
 8002df2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e08:	d013      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e0e:	d802      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e14:	e01f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e20:	d01c      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e22:	e018      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e24:	4baf      	ldr	r3, [pc, #700]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4aae      	ldr	r2, [pc, #696]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e30:	e015      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 f96f 	bl	800411c <RCCEx_PLL2_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e42:	e00c      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3324      	adds	r3, #36	; 0x24
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fa18 	bl	8004280 <RCCEx_PLL3_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e54:	e003      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5a:	e000      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e64:	4b9f      	ldr	r3, [pc, #636]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e70:	499c      	ldr	r1, [pc, #624]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	650b      	str	r3, [r1, #80]	; 0x50
 8002e76:	e001      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03d      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d826      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002e90:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ead 	.word	0x08002ead
 8002e9c:	08002ebb 	.word	0x08002ebb
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002ee5 	.word	0x08002ee5
 8002ea8:	08002ee5 	.word	0x08002ee5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eac:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	4a8c      	ldr	r2, [pc, #560]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 f92b 	bl	800411c <RCCEx_PLL2_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3324      	adds	r3, #36	; 0x24
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 f9d4 	bl	8004280 <RCCEx_PLL3_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eec:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	f023 0207 	bic.w	r2, r3, #7
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	497a      	ldr	r1, [pc, #488]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	650b      	str	r3, [r1, #80]	; 0x50
 8002efe:	e001      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d03e      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d01c      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f18:	2b80      	cmp	r3, #128	; 0x80
 8002f1a:	d804      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002f24:	e01e      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002f26:	2bc0      	cmp	r3, #192	; 0xc0
 8002f28:	d01f      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2e:	d01e      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f30:	e018      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002f3e:	e017      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f8e8 	bl	800411c <RCCEx_PLL2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002f50:	e00e      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3324      	adds	r3, #36	; 0x24
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f991 	bl	8004280 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002f62:	e005      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	e002      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	4958      	ldr	r1, [pc, #352]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	650b      	str	r3, [r1, #80]	; 0x50
 8002f88:	e001      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d044      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa4:	d01f      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d805      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002fb6:	e01f      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002fb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002fbc:	d01f      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc2:	d01e      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fc4:	e018      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fd2:	e017      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 f89e 	bl	800411c <RCCEx_PLL2_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002fe4:	e00e      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3324      	adds	r3, #36	; 0x24
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 f947 	bl	8004280 <RCCEx_PLL3_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003018:	4932      	ldr	r1, [pc, #200]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800301a:	4313      	orrs	r3, r2
 800301c:	658b      	str	r3, [r1, #88]	; 0x58
 800301e:	e001      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d044      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800303a:	d01f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800303c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003040:	d805      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304a:	d00e      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800304c:	e01f      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800304e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003052:	d01f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003058:	d01e      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800305a:	e018      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003068:	e017      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f853 	bl	800411c <RCCEx_PLL2_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800307a:	e00e      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f8fc 	bl	8004280 <RCCEx_PLL3_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800308c:	e005      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
      break;
 8003092:	e002      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030ae:	490d      	ldr	r1, [pc, #52]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	658b      	str	r3, [r1, #88]	; 0x58
 80030b4:	e001      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d035      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d802      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01b      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80030d6:	e017      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d00c      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80030dc:	2b30      	cmp	r3, #48	; 0x30
 80030de:	d018      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80030e0:	e012      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e8:	4baf      	ldr	r3, [pc, #700]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4aae      	ldr	r2, [pc, #696]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80030f4:	e00e      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 f80d 	bl	800411c <RCCEx_PLL2_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003106:	e005      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800311a:	4ba3      	ldr	r3, [pc, #652]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	49a0      	ldr	r1, [pc, #640]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800312c:	e001      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d042      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d01f      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314c:	d805      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	d00e      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003158:	e01f      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800315a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800315e:	d01f      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003164:	d01e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003166:	e018      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003168:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4a8e      	ldr	r2, [pc, #568]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800316e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003174:	e017      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ffcd 	bl	800411c <RCCEx_PLL2_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003186:	e00e      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3324      	adds	r3, #36	; 0x24
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f001 f876 	bl	8004280 <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003198:	e005      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80031a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031ac:	4b7e      	ldr	r3, [pc, #504]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	497b      	ldr	r1, [pc, #492]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	650b      	str	r3, [r1, #80]	; 0x50
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d042      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031d8:	d01b      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031de:	d805      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d022      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80031ea:	e01b      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80031ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f0:	d01d      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80031f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f6:	d01c      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80031f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031fc:	d01b      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80031fe:	e011      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f000 ff88 	bl	800411c <RCCEx_PLL2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003210:	e012      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3324      	adds	r3, #36	; 0x24
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f831 	bl	8004280 <RCCEx_PLL3_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800323e:	4b5a      	ldr	r3, [pc, #360]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	4957      	ldr	r1, [pc, #348]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	650b      	str	r3, [r1, #80]	; 0x50
 8003250:	e001      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d044      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326c:	d01b      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800326e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003272:	d805      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d022      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800327e:	e01b      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d01d      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328a:	d01c      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800328c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003290:	d01b      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003292:	e011      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 ff3e 	bl	800411c <RCCEx_PLL2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80032a4:	e012      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3324      	adds	r3, #36	; 0x24
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 ffe7 	bl	8004280 <RCCEx_PLL3_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80032b6:	e009      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
      break;
 80032bc:	e006      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80032be:	bf00      	nop
 80032c0:	e004      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80032ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032e0:	4931      	ldr	r1, [pc, #196]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	658b      	str	r3, [r1, #88]	; 0x58
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02d      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003300:	d005      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003306:	d009      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800330c:	e00f      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330e:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800331a:	e00c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fefa 	bl	800411c <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
      break;
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	4917      	ldr	r1, [pc, #92]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	650b      	str	r3, [r1, #80]	; 0x50
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d035      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	2b03      	cmp	r3, #3
 8003366:	d81b      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033ad 	.word	0x080033ad
 8003374:	08003381 	.word	0x08003381
 8003378:	0800338f 	.word	0x0800338f
 800337c:	080033ad 	.word	0x080033ad
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800338c:	e00f      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fec1 	bl	800411c <RCCEx_PLL2_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800339e:	e006      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
      break;
 80033a4:	e003      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
      break;
 80033ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033b4:	4bba      	ldr	r3, [pc, #744]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	49b7      	ldr	r1, [pc, #732]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033c6:	e001      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033da:	4bb2      	ldr	r3, [pc, #712]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4ab1      	ldr	r2, [pc, #708]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e6:	f7fe fa13 	bl	8001810 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ec:	e009      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe fa0f 	bl	8001810 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d902      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	75fb      	strb	r3, [r7, #23]
        break;
 8003400:	e005      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003402:	4ba8      	ldr	r3, [pc, #672]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ef      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d166      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003414:	4ba2      	ldr	r3, [pc, #648]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800341e:	4053      	eors	r3, r2
 8003420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003428:	4b9d      	ldr	r3, [pc, #628]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003432:	4b9b      	ldr	r3, [pc, #620]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a9a      	ldr	r2, [pc, #616]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343e:	4b98      	ldr	r3, [pc, #608]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a97      	ldr	r2, [pc, #604]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800344a:	4a95      	ldr	r2, [pc, #596]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345a:	d115      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe f9d8 	bl	8001810 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003462:	e00b      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fe f9d4 	bl	8001810 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d902      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	75fb      	strb	r3, [r7, #23]
            break;
 800347a:	e005      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800347c:	4b88      	ldr	r3, [pc, #544]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ed      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d126      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349c:	d10d      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800349e:	4b80      	ldr	r3, [pc, #512]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ac:	0919      	lsrs	r1, r3, #4
 80034ae:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80034b0:	400b      	ands	r3, r1
 80034b2:	497b      	ldr	r1, [pc, #492]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
 80034b8:	e005      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80034ba:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034c4:	6113      	str	r3, [r2, #16]
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	4972      	ldr	r1, [pc, #456]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	670b      	str	r3, [r1, #112]	; 0x70
 80034da:	e004      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	75bb      	strb	r3, [r7, #22]
 80034e0:	e001      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07d      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	2b28      	cmp	r3, #40	; 0x28
 80034f8:	d866      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	080035cf 	.word	0x080035cf
 8003504:	080035c9 	.word	0x080035c9
 8003508:	080035c9 	.word	0x080035c9
 800350c:	080035c9 	.word	0x080035c9
 8003510:	080035c9 	.word	0x080035c9
 8003514:	080035c9 	.word	0x080035c9
 8003518:	080035c9 	.word	0x080035c9
 800351c:	080035c9 	.word	0x080035c9
 8003520:	080035a5 	.word	0x080035a5
 8003524:	080035c9 	.word	0x080035c9
 8003528:	080035c9 	.word	0x080035c9
 800352c:	080035c9 	.word	0x080035c9
 8003530:	080035c9 	.word	0x080035c9
 8003534:	080035c9 	.word	0x080035c9
 8003538:	080035c9 	.word	0x080035c9
 800353c:	080035c9 	.word	0x080035c9
 8003540:	080035b7 	.word	0x080035b7
 8003544:	080035c9 	.word	0x080035c9
 8003548:	080035c9 	.word	0x080035c9
 800354c:	080035c9 	.word	0x080035c9
 8003550:	080035c9 	.word	0x080035c9
 8003554:	080035c9 	.word	0x080035c9
 8003558:	080035c9 	.word	0x080035c9
 800355c:	080035c9 	.word	0x080035c9
 8003560:	080035cf 	.word	0x080035cf
 8003564:	080035c9 	.word	0x080035c9
 8003568:	080035c9 	.word	0x080035c9
 800356c:	080035c9 	.word	0x080035c9
 8003570:	080035c9 	.word	0x080035c9
 8003574:	080035c9 	.word	0x080035c9
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035c9 	.word	0x080035c9
 8003580:	080035cf 	.word	0x080035cf
 8003584:	080035c9 	.word	0x080035c9
 8003588:	080035c9 	.word	0x080035c9
 800358c:	080035c9 	.word	0x080035c9
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035c9 	.word	0x080035c9
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	080035cf 	.word	0x080035cf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fdb6 	bl	800411c <RCCEx_PLL2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80035b4:	e00c      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3324      	adds	r3, #36	; 0x24
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fe5f 	bl	8004280 <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
      break;
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80035ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e2:	492f      	ldr	r1, [pc, #188]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	654b      	str	r3, [r1, #84]	; 0x54
 80035e8:	e001      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d037      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d820      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800364b 	.word	0x0800364b
 800360c:	08003621 	.word	0x08003621
 8003610:	08003633 	.word	0x08003633
 8003614:	0800364b 	.word	0x0800364b
 8003618:	0800364b 	.word	0x0800364b
 800361c:	0800364b 	.word	0x0800364b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fd78 	bl	800411c <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003630:	e00c      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3324      	adds	r3, #36	; 0x24
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fe21 	bl	8004280 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003642:	e003      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	75fb      	strb	r3, [r7, #23]
      break;
 8003648:	e000      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800364a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	4910      	ldr	r1, [pc, #64]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	654b      	str	r3, [r1, #84]	; 0x54
 8003664:	e001      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d040      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	2b05      	cmp	r3, #5
 800367e:	d827      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	080036d7 	.word	0x080036d7
 800368c:	080036ad 	.word	0x080036ad
 8003690:	080036bf 	.word	0x080036bf
 8003694:	080036d7 	.word	0x080036d7
 8003698:	080036d7 	.word	0x080036d7
 800369c:	080036d7 	.word	0x080036d7
 80036a0:	58024400 	.word	0x58024400
 80036a4:	58024800 	.word	0x58024800
 80036a8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	2101      	movs	r1, #1
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fd32 	bl	800411c <RCCEx_PLL2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e00c      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3324      	adds	r3, #36	; 0x24
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fddb 	bl	8004280 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
      break;
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80036d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036de:	4bb2      	ldr	r3, [pc, #712]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	49ae      	ldr	r1, [pc, #696]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	658b      	str	r3, [r1, #88]	; 0x58
 80036f2:	e001      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d044      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800370e:	d01b      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003714:	d805      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d022      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800371a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003720:	e01b      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d01d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800372c:	d01c      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800372e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003732:	d01b      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003734:	e011      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fced 	bl	800411c <RCCEx_PLL2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003746:	e012      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3324      	adds	r3, #36	; 0x24
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fd96 	bl	8004280 <RCCEx_PLL3_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003758:	e009      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
      break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003760:	bf00      	nop
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003764:	bf00      	nop
 8003766:	e002      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800376c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003774:	4b8c      	ldr	r3, [pc, #560]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003782:	4989      	ldr	r1, [pc, #548]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	654b      	str	r3, [r1, #84]	; 0x54
 8003788:	e001      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d044      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a4:	d01b      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037aa:	d805      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d022      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80037b6:	e01b      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d01d      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80037be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037c2:	d01c      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80037c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037c8:	d01b      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80037ca:	e011      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fca2 	bl	800411c <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037dc:	e012      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3324      	adds	r3, #36	; 0x24
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd4b 	bl	8004280 <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037ee:	e009      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	75fb      	strb	r3, [r7, #23]
      break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80037f6:	bf00      	nop
 80037f8:	e004      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80037fa:	bf00      	nop
 80037fc:	e002      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003818:	4963      	ldr	r1, [pc, #396]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	658b      	str	r3, [r1, #88]	; 0x58
 800381e:	e001      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d044      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383a:	d01b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800383c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003840:	d805      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d022      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800384c:	e01b      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003852:	d01d      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003854:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003858:	d01c      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800385a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800385e:	d01b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003860:	e011      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc57 	bl	800411c <RCCEx_PLL2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003872:	e012      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	2102      	movs	r1, #2
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fd00 	bl	8004280 <RCCEx_PLL3_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003884:	e009      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
      break;
 800388a:	e006      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800388c:	bf00      	nop
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003890:	bf00      	nop
 8003892:	e002      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038a0:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ae:	493e      	ldr	r1, [pc, #248]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	658b      	str	r3, [r1, #88]	; 0x58
 80038b4:	e001      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d10a      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3324      	adds	r3, #36	; 0x24
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fcd1 	bl	8004280 <RCCEx_PLL3_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f6:	492c      	ldr	r1, [pc, #176]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003912:	d10a      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	2102      	movs	r1, #2
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fcb0 	bl	8004280 <RCCEx_PLL3_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003938:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d032      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d00d      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800395a:	d016      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d111      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fbd8 	bl	800411c <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003970:	e00c      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3324      	adds	r3, #36	; 0x24
 8003976:	2102      	movs	r1, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fc81 	bl	8004280 <RCCEx_PLL3_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
      break;
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800398a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039a0:	4901      	ldr	r1, [pc, #4]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	658b      	str	r3, [r1, #88]	; 0x58
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80039a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c6:	d00c      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80039c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039cc:	d015      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d2:	d10f      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b79      	ldr	r3, [pc, #484]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a78      	ldr	r2, [pc, #480]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80039e0:	e00c      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fc49 	bl	8004280 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80039fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a02:	4b6e      	ldr	r3, [pc, #440]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	496a      	ldr	r1, [pc, #424]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	654b      	str	r3, [r1, #84]	; 0x54
 8003a16:	e001      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d029      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d007      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003a36:	e00f      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a38:	4b60      	ldr	r3, [pc, #384]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a5f      	ldr	r2, [pc, #380]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a44:	e00b      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fb65 	bl	800411c <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a64:	4b55      	ldr	r3, [pc, #340]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	4952      	ldr	r1, [pc, #328]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a76:	e001      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3324      	adds	r3, #36	; 0x24
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fbf6 	bl	8004280 <RCCEx_PLL3_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02f      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab2:	d00c      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab8:	d802      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d011      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003abe:	e00d      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac4:	d00f      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aca:	d00e      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ada:	e007      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	e004      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003af2:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afe:	492f      	ldr	r1, [pc, #188]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	654b      	str	r3, [r1, #84]	; 0x54
 8003b04:	e001      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b16:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4926      	ldr	r1, [pc, #152]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b42:	491e      	ldr	r1, [pc, #120]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b60:	4916      	ldr	r1, [pc, #88]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b7c:	6113      	str	r3, [r2, #16]
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da08      	bge.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	4906      	ldr	r1, [pc, #24]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003ba8:	7dbb      	ldrb	r3, [r7, #22]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	58024400 	.word	0x58024400

08003bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003bc4:	f7ff f8b2 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8003bc8:	4601      	mov	r1, r0
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	58024400 	.word	0x58024400
 8003be8:	08006c48 	.word	0x08006c48

08003bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bf4:	4b9d      	ldr	r3, [pc, #628]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003bfe:	4b9b      	ldr	r3, [pc, #620]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	0b1b      	lsrs	r3, r3, #12
 8003c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c0a:	4b98      	ldr	r3, [pc, #608]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c16:	4b95      	ldr	r3, [pc, #596]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 810a 	beq.w	8003e4e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d05a      	beq.n	8003cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d302      	bcc.n	8003c4a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d078      	beq.n	8003d3a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003c48:	e099      	b.n	8003d7e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c4a:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02d      	beq.n	8003cb2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c56:	4b85      	ldr	r3, [pc, #532]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	08db      	lsrs	r3, r3, #3
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	4a83      	ldr	r2, [pc, #524]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c80:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c90:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c94:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003cb0:	e087      	b.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc4:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cf4:	e065      	b.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d08:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d18:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d38:	e043      	b.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4c:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d60:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d7c:	e021      	b.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d88:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003da4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dc0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	0a5b      	lsrs	r3, r3, #9
 8003dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de8:	ee17 2a90 	vmov	r2, s15
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003df0:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e16:	ee17 2a90 	vmov	r2, s15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	0e1b      	lsrs	r3, r3, #24
 8003e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e44:	ee17 2a90 	vmov	r2, s15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e4c:	e008      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3724      	adds	r7, #36	; 0x24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	58024400 	.word	0x58024400
 8003e70:	03d09000 	.word	0x03d09000
 8003e74:	46000000 	.word	0x46000000
 8003e78:	4c742400 	.word	0x4c742400
 8003e7c:	4a742400 	.word	0x4a742400
 8003e80:	4bbebc20 	.word	0x4bbebc20

08003e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e8c:	4b9d      	ldr	r3, [pc, #628]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003e96:	4b9b      	ldr	r3, [pc, #620]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	0d1b      	lsrs	r3, r3, #20
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ea2:	4b98      	ldr	r3, [pc, #608]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003eae:	4b95      	ldr	r3, [pc, #596]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	08db      	lsrs	r3, r3, #3
 8003eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 810a 	beq.w	80040e6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d05a      	beq.n	8003f8e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d302      	bcc.n	8003ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d078      	beq.n	8003fd2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003ee0:	e099      	b.n	8004016 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ee2:	4b88      	ldr	r3, [pc, #544]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02d      	beq.n	8003f4a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eee:	4b85      	ldr	r3, [pc, #532]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	08db      	lsrs	r3, r3, #3
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	4a83      	ldr	r2, [pc, #524]	; (8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f18:	4b7a      	ldr	r3, [pc, #488]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f44:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f48:	e087      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5c:	4b69      	ldr	r3, [pc, #420]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f70:	eddf 5a66 	vldr	s11, [pc, #408]	; 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f8c:	e065      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa0:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fd0:	e043      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe4:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004014:	e021      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004020:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004028:	4b36      	ldr	r3, [pc, #216]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004038:	ed97 6a03 	vldr	s12, [r7, #12]
 800403c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800410c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004054:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004058:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004074:	edd7 6a07 	vldr	s13, [r7, #28]
 8004078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004080:	ee17 2a90 	vmov	r2, s15
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800409e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ae:	ee17 2a90 	vmov	r2, s15
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80040b6:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	0e1b      	lsrs	r3, r3, #24
 80040bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80040d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040dc:	ee17 2a90 	vmov	r2, s15
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040e4:	e008      	b.n	80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	bf00      	nop
 80040fa:	3724      	adds	r7, #36	; 0x24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	58024400 	.word	0x58024400
 8004108:	03d09000 	.word	0x03d09000
 800410c:	46000000 	.word	0x46000000
 8004110:	4c742400 	.word	0x4c742400
 8004114:	4a742400 	.word	0x4a742400
 8004118:	4bbebc20 	.word	0x4bbebc20

0800411c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800412a:	4b53      	ldr	r3, [pc, #332]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b03      	cmp	r3, #3
 8004134:	d101      	bne.n	800413a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e099      	b.n	800426e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800413a:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004146:	f7fd fb63 	bl	8001810 <HAL_GetTick>
 800414a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800414c:	e008      	b.n	8004160 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800414e:	f7fd fb5f 	bl	8001810 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e086      	b.n	800426e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004160:	4b45      	ldr	r3, [pc, #276]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800416c:	4b42      	ldr	r3, [pc, #264]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	493f      	ldr	r1, [pc, #252]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	628b      	str	r3, [r1, #40]	; 0x28
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	3b01      	subs	r3, #1
 8004186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	3b01      	subs	r3, #1
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	b29b      	uxth	r3, r3
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041b0:	4931      	ldr	r1, [pc, #196]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	492d      	ldr	r1, [pc, #180]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f023 0220 	bic.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4928      	ldr	r1, [pc, #160]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041da:	4b27      	ldr	r3, [pc, #156]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	4a26      	ldr	r2, [pc, #152]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	f023 0310 	bic.w	r3, r3, #16
 80041e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <RCCEx_PLL2_Config+0x160>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	69d2      	ldr	r2, [r2, #28]
 80041f2:	00d2      	lsls	r2, r2, #3
 80041f4:	4920      	ldr	r1, [pc, #128]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041fa:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004200:	f043 0310 	orr.w	r3, r3, #16
 8004204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004218:	e00f      	b.n	800423a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d106      	bne.n	800422e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800422c:	e005      	b.n	800423a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800422e:	4b12      	ldr	r3, [pc, #72]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	4a11      	ldr	r2, [pc, #68]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004246:	f7fd fae3 	bl	8001810 <HAL_GetTick>
 800424a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800424c:	e008      	b.n	8004260 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800424e:	f7fd fadf 	bl	8001810 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <RCCEx_PLL2_Config+0x15c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	ffff0007 	.word	0xffff0007

08004280 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800428e:	4b53      	ldr	r3, [pc, #332]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b03      	cmp	r3, #3
 8004298:	d101      	bne.n	800429e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e099      	b.n	80043d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800429e:	4b4f      	ldr	r3, [pc, #316]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a4e      	ldr	r2, [pc, #312]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042aa:	f7fd fab1 	bl	8001810 <HAL_GetTick>
 80042ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042b2:	f7fd faad 	bl	8001810 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e086      	b.n	80043d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042c4:	4b45      	ldr	r3, [pc, #276]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042d0:	4b42      	ldr	r3, [pc, #264]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	051b      	lsls	r3, r3, #20
 80042de:	493f      	ldr	r1, [pc, #252]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	628b      	str	r3, [r1, #40]	; 0x28
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	025b      	lsls	r3, r3, #9
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	3b01      	subs	r3, #1
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	3b01      	subs	r3, #1
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004314:	4931      	ldr	r1, [pc, #196]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800431a:	4b30      	ldr	r3, [pc, #192]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	492d      	ldr	r1, [pc, #180]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004328:	4313      	orrs	r3, r2
 800432a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	4928      	ldr	r1, [pc, #160]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	4a26      	ldr	r2, [pc, #152]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 800434c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <RCCEx_PLL3_Config+0x160>)
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	69d2      	ldr	r2, [r2, #28]
 8004356:	00d2      	lsls	r2, r2, #3
 8004358:	4920      	ldr	r1, [pc, #128]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004376:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800437c:	e00f      	b.n	800439e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 800438a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800438e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004390:	e005      	b.n	800439e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	4a11      	ldr	r2, [pc, #68]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 8004398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800439e:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80043a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043aa:	f7fd fa31 	bl	8001810 <HAL_GetTick>
 80043ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043b0:	e008      	b.n	80043c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043b2:	f7fd fa2d 	bl	8001810 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e006      	b.n	80043d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <RCCEx_PLL3_Config+0x15c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	ffff0007 	.word	0xffff0007

080043e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e042      	b.n	800447c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fc ffe1 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2224      	movs	r2, #36	; 0x24
 8004412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f992 	bl	8004750 <UART_SetConfig>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e022      	b.n	800447c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ff36 	bl	80052b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 ffbd 	bl	80053f4 <UART_CheckIdleState>
 800447a:	4603      	mov	r3, r0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449a:	2b20      	cmp	r3, #32
 800449c:	f040 8083 	bne.w	80045a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Transmit+0x28>
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e07b      	b.n	80045a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Transmit+0x3a>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e074      	b.n	80045a8 <HAL_UART_Transmit+0x124>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2221      	movs	r2, #33	; 0x21
 80044d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80044d6:	f7fd f99b 	bl	8001810 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f4:	d108      	bne.n	8004508 <HAL_UART_Transmit+0x84>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e003      	b.n	8004510 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004518:	e02c      	b.n	8004574 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 ffad 	bl	8005484 <UART_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e039      	b.n	80045a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3302      	adds	r3, #2
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e007      	b.n	8004562 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3301      	adds	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1cc      	bne.n	800451a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	2140      	movs	r1, #64	; 0x40
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 ff7a 	bl	8005484 <UART_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e006      	b.n	80045a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	f040 80bd 	bne.w	8004746 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_UART_Receive+0x28>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b5      	b.n	8004748 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Receive+0x3a>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0ae      	b.n	8004748 <HAL_UART_Receive+0x198>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004602:	f7fd f905 	bl	8001810 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004620:	d10e      	bne.n	8004640 <HAL_UART_Receive+0x90>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_UART_Receive+0x86>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004634:	e02d      	b.n	8004692 <HAL_UART_Receive+0xe2>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	22ff      	movs	r2, #255	; 0xff
 800463a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800463e:	e028      	b.n	8004692 <HAL_UART_Receive+0xe2>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10d      	bne.n	8004664 <HAL_UART_Receive+0xb4>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <HAL_UART_Receive+0xaa>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	22ff      	movs	r2, #255	; 0xff
 8004654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004658:	e01b      	b.n	8004692 <HAL_UART_Receive+0xe2>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	227f      	movs	r2, #127	; 0x7f
 800465e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004662:	e016      	b.n	8004692 <HAL_UART_Receive+0xe2>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466c:	d10d      	bne.n	800468a <HAL_UART_Receive+0xda>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_Receive+0xd0>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	227f      	movs	r2, #127	; 0x7f
 800467a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800467e:	e008      	b.n	8004692 <HAL_UART_Receive+0xe2>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	223f      	movs	r2, #63	; 0x3f
 8004684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004688:	e003      	b.n	8004692 <HAL_UART_Receive+0xe2>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004698:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d108      	bne.n	80046b6 <HAL_UART_Receive+0x106>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e003      	b.n	80046be <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046c6:	e032      	b.n	800472e <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2200      	movs	r2, #0
 80046d0:	2120      	movs	r1, #32
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fed6 	bl	8005484 <UART_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e032      	b.n	8004748 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10c      	bne.n	8004702 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	8a7b      	ldrh	r3, [r7, #18]
 80046f2:	4013      	ands	r3, r2
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	3302      	adds	r3, #2
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e00c      	b.n	800471c <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	b2da      	uxtb	r2, r3
 800470a:	8a7b      	ldrh	r3, [r7, #18]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4013      	ands	r3, r2
 8004710:	b2da      	uxtb	r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1c6      	bne.n	80046c8 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004754:	b08e      	sub	sp, #56	; 0x38
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4313      	orrs	r3, r2
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477e:	4313      	orrs	r3, r2
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4bc1      	ldr	r3, [pc, #772]	; (8004a90 <UART_SetConfig+0x340>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004792:	430b      	orrs	r3, r1
 8004794:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4ab7      	ldr	r2, [pc, #732]	; (8004a94 <UART_SetConfig+0x344>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c2:	4313      	orrs	r3, r2
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4bb2      	ldr	r3, [pc, #712]	; (8004a98 <UART_SetConfig+0x348>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	f023 010f 	bic.w	r1, r3, #15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4aa9      	ldr	r2, [pc, #676]	; (8004a9c <UART_SetConfig+0x34c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d177      	bne.n	80048ea <UART_SetConfig+0x19a>
 80047fa:	4ba9      	ldr	r3, [pc, #676]	; (8004aa0 <UART_SetConfig+0x350>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004802:	2b28      	cmp	r3, #40	; 0x28
 8004804:	d86c      	bhi.n	80048e0 <UART_SetConfig+0x190>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0xbc>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	080048b1 	.word	0x080048b1
 8004810:	080048e1 	.word	0x080048e1
 8004814:	080048e1 	.word	0x080048e1
 8004818:	080048e1 	.word	0x080048e1
 800481c:	080048e1 	.word	0x080048e1
 8004820:	080048e1 	.word	0x080048e1
 8004824:	080048e1 	.word	0x080048e1
 8004828:	080048e1 	.word	0x080048e1
 800482c:	080048b9 	.word	0x080048b9
 8004830:	080048e1 	.word	0x080048e1
 8004834:	080048e1 	.word	0x080048e1
 8004838:	080048e1 	.word	0x080048e1
 800483c:	080048e1 	.word	0x080048e1
 8004840:	080048e1 	.word	0x080048e1
 8004844:	080048e1 	.word	0x080048e1
 8004848:	080048e1 	.word	0x080048e1
 800484c:	080048c1 	.word	0x080048c1
 8004850:	080048e1 	.word	0x080048e1
 8004854:	080048e1 	.word	0x080048e1
 8004858:	080048e1 	.word	0x080048e1
 800485c:	080048e1 	.word	0x080048e1
 8004860:	080048e1 	.word	0x080048e1
 8004864:	080048e1 	.word	0x080048e1
 8004868:	080048e1 	.word	0x080048e1
 800486c:	080048c9 	.word	0x080048c9
 8004870:	080048e1 	.word	0x080048e1
 8004874:	080048e1 	.word	0x080048e1
 8004878:	080048e1 	.word	0x080048e1
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080048e1 	.word	0x080048e1
 8004884:	080048e1 	.word	0x080048e1
 8004888:	080048e1 	.word	0x080048e1
 800488c:	080048d1 	.word	0x080048d1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048e1 	.word	0x080048e1
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048e1 	.word	0x080048e1
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e233      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048be:	e22f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c6:	e22b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ce:	e227      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048d0:	2320      	movs	r3, #32
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	e223      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e21f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e6:	bf00      	nop
 80048e8:	e21a      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6d      	ldr	r2, [pc, #436]	; (8004aa4 <UART_SetConfig+0x354>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d132      	bne.n	800495a <UART_SetConfig+0x20a>
 80048f4:	4b6a      	ldr	r3, [pc, #424]	; (8004aa0 <UART_SetConfig+0x350>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	d827      	bhi.n	8004950 <UART_SetConfig+0x200>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x1b8>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004921 	.word	0x08004921
 800490c:	08004929 	.word	0x08004929
 8004910:	08004931 	.word	0x08004931
 8004914:	08004939 	.word	0x08004939
 8004918:	08004941 	.word	0x08004941
 800491c:	08004949 	.word	0x08004949
 8004920:	2300      	movs	r3, #0
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004926:	e1fb      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492e:	e1f7      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004936:	e1f3      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493e:	e1ef      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004940:	2320      	movs	r3, #32
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	e1eb      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004948:	2340      	movs	r3, #64	; 0x40
 800494a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494e:	e1e7      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004956:	bf00      	nop
 8004958:	e1e2      	b.n	8004d20 <UART_SetConfig+0x5d0>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <UART_SetConfig+0x358>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d132      	bne.n	80049ca <UART_SetConfig+0x27a>
 8004964:	4b4e      	ldr	r3, [pc, #312]	; (8004aa0 <UART_SetConfig+0x350>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	2b05      	cmp	r3, #5
 800496e:	d827      	bhi.n	80049c0 <UART_SetConfig+0x270>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x228>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	08004991 	.word	0x08004991
 800497c:	08004999 	.word	0x08004999
 8004980:	080049a1 	.word	0x080049a1
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	2300      	movs	r3, #0
 8004992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004996:	e1c3      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499e:	e1bf      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a6:	e1bb      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ae:	e1b7      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80049b0:	2320      	movs	r3, #32
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e1b3      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80049b8:	2340      	movs	r3, #64	; 0x40
 80049ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049be:	e1af      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049c6:	bf00      	nop
 80049c8:	e1aa      	b.n	8004d20 <UART_SetConfig+0x5d0>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a37      	ldr	r2, [pc, #220]	; (8004aac <UART_SetConfig+0x35c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d132      	bne.n	8004a3a <UART_SetConfig+0x2ea>
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <UART_SetConfig+0x350>)
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d827      	bhi.n	8004a30 <UART_SetConfig+0x2e0>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0x298>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a01 	.word	0x08004a01
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a06:	e18b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e187      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e183      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e17f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a20:	2320      	movs	r3, #32
 8004a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a26:	e17b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a28:	2340      	movs	r3, #64	; 0x40
 8004a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2e:	e177      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a36:	bf00      	nop
 8004a38:	e172      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <UART_SetConfig+0x360>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d144      	bne.n	8004ace <UART_SetConfig+0x37e>
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <UART_SetConfig+0x350>)
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d839      	bhi.n	8004ac4 <UART_SetConfig+0x374>
 8004a50:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0x308>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a71 	.word	0x08004a71
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	08004a81 	.word	0x08004a81
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004ab5 	.word	0x08004ab5
 8004a6c:	08004abd 	.word	0x08004abd
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a76:	e153      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7e:	e14f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a80:	2308      	movs	r3, #8
 8004a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a86:	e14b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8e:	e147      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004a90:	cfff69f3 	.word	0xcfff69f3
 8004a94:	58000c00 	.word	0x58000c00
 8004a98:	11fff4ff 	.word	0x11fff4ff
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	40004400 	.word	0x40004400
 8004aa8:	40004800 	.word	0x40004800
 8004aac:	40004c00 	.word	0x40004c00
 8004ab0:	40005000 	.word	0x40005000
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aba:	e131      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ac2:	e12d      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aca:	bf00      	nop
 8004acc:	e128      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4ab6      	ldr	r2, [pc, #728]	; (8004dac <UART_SetConfig+0x65c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d178      	bne.n	8004bca <UART_SetConfig+0x47a>
 8004ad8:	4bb5      	ldr	r3, [pc, #724]	; (8004db0 <UART_SetConfig+0x660>)
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae0:	2b28      	cmp	r3, #40	; 0x28
 8004ae2:	d86d      	bhi.n	8004bc0 <UART_SetConfig+0x470>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0x39c>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b91 	.word	0x08004b91
 8004af0:	08004bc1 	.word	0x08004bc1
 8004af4:	08004bc1 	.word	0x08004bc1
 8004af8:	08004bc1 	.word	0x08004bc1
 8004afc:	08004bc1 	.word	0x08004bc1
 8004b00:	08004bc1 	.word	0x08004bc1
 8004b04:	08004bc1 	.word	0x08004bc1
 8004b08:	08004bc1 	.word	0x08004bc1
 8004b0c:	08004b99 	.word	0x08004b99
 8004b10:	08004bc1 	.word	0x08004bc1
 8004b14:	08004bc1 	.word	0x08004bc1
 8004b18:	08004bc1 	.word	0x08004bc1
 8004b1c:	08004bc1 	.word	0x08004bc1
 8004b20:	08004bc1 	.word	0x08004bc1
 8004b24:	08004bc1 	.word	0x08004bc1
 8004b28:	08004bc1 	.word	0x08004bc1
 8004b2c:	08004ba1 	.word	0x08004ba1
 8004b30:	08004bc1 	.word	0x08004bc1
 8004b34:	08004bc1 	.word	0x08004bc1
 8004b38:	08004bc1 	.word	0x08004bc1
 8004b3c:	08004bc1 	.word	0x08004bc1
 8004b40:	08004bc1 	.word	0x08004bc1
 8004b44:	08004bc1 	.word	0x08004bc1
 8004b48:	08004bc1 	.word	0x08004bc1
 8004b4c:	08004ba9 	.word	0x08004ba9
 8004b50:	08004bc1 	.word	0x08004bc1
 8004b54:	08004bc1 	.word	0x08004bc1
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	08004bc1 	.word	0x08004bc1
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bb1 	.word	0x08004bb1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004bc1 	.word	0x08004bc1
 8004b7c:	08004bc1 	.word	0x08004bc1
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004bc1 	.word	0x08004bc1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b96:	e0c3      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9e:	e0bf      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba6:	e0bb      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bae:	e0b7      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bb6:	e0b3      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004bb8:	2340      	movs	r3, #64	; 0x40
 8004bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bbe:	e0af      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc6:	bf00      	nop
 8004bc8:	e0aa      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a79      	ldr	r2, [pc, #484]	; (8004db4 <UART_SetConfig+0x664>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d132      	bne.n	8004c3a <UART_SetConfig+0x4ea>
 8004bd4:	4b76      	ldr	r3, [pc, #472]	; (8004db0 <UART_SetConfig+0x660>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d827      	bhi.n	8004c30 <UART_SetConfig+0x4e0>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x498>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c01 	.word	0x08004c01
 8004bec:	08004c09 	.word	0x08004c09
 8004bf0:	08004c11 	.word	0x08004c11
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c06:	e08b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0e:	e087      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c16:	e083      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1e:	e07f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c20:	2320      	movs	r3, #32
 8004c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c26:	e07b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c28:	2340      	movs	r3, #64	; 0x40
 8004c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2e:	e077      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c36:	bf00      	nop
 8004c38:	e072      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <UART_SetConfig+0x668>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d132      	bne.n	8004caa <UART_SetConfig+0x55a>
 8004c44:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <UART_SetConfig+0x660>)
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d827      	bhi.n	8004ca0 <UART_SetConfig+0x550>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <UART_SetConfig+0x508>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c71 	.word	0x08004c71
 8004c5c:	08004c79 	.word	0x08004c79
 8004c60:	08004c81 	.word	0x08004c81
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	2300      	movs	r3, #0
 8004c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c76:	e053      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7e:	e04f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c86:	e04b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c8e:	e047      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c90:	2320      	movs	r3, #32
 8004c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c96:	e043      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c9e:	e03f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ca6:	bf00      	nop
 8004ca8:	e03a      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a43      	ldr	r2, [pc, #268]	; (8004dbc <UART_SetConfig+0x66c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d132      	bne.n	8004d1a <UART_SetConfig+0x5ca>
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <UART_SetConfig+0x660>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	2b05      	cmp	r3, #5
 8004cbe:	d827      	bhi.n	8004d10 <UART_SetConfig+0x5c0>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x578>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004ce1 	.word	0x08004ce1
 8004ccc:	08004ce9 	.word	0x08004ce9
 8004cd0:	08004cf1 	.word	0x08004cf1
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce6:	e01b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cee:	e017      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf6:	e013      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfe:	e00f      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004d00:	2320      	movs	r3, #32
 8004d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d06:	e00b      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004d08:	2340      	movs	r3, #64	; 0x40
 8004d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0e:	e007      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <UART_SetConfig+0x5d0>
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a25      	ldr	r2, [pc, #148]	; (8004dbc <UART_SetConfig+0x66c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	f040 80b8 	bne.w	8004e9c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d019      	beq.n	8004d68 <UART_SetConfig+0x618>
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	dc04      	bgt.n	8004d42 <UART_SetConfig+0x5f2>
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d009      	beq.n	8004d50 <UART_SetConfig+0x600>
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d00b      	beq.n	8004d58 <UART_SetConfig+0x608>
 8004d40:	e042      	b.n	8004dc8 <UART_SetConfig+0x678>
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d02b      	beq.n	8004d9e <UART_SetConfig+0x64e>
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d02c      	beq.n	8004da4 <UART_SetConfig+0x654>
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d014      	beq.n	8004d78 <UART_SetConfig+0x628>
 8004d4e:	e03b      	b.n	8004dc8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d50:	f7fe ff36 	bl	8003bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d56:	e03d      	b.n	8004dd4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe ff45 	bl	8003bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d66:	e035      	b.n	8004dd4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff f889 	bl	8003e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d76:	e02d      	b.n	8004dd4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x660>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <UART_SetConfig+0x660>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <UART_SetConfig+0x670>)
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d96:	e01d      	b.n	8004dd4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <UART_SetConfig+0x670>)
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d9c:	e01a      	b.n	8004dd4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <UART_SetConfig+0x674>)
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004da2:	e017      	b.n	8004dd4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004daa:	e013      	b.n	8004dd4 <UART_SetConfig+0x684>
 8004dac:	40011400 	.word	0x40011400
 8004db0:	58024400 	.word	0x58024400
 8004db4:	40007800 	.word	0x40007800
 8004db8:	40007c00 	.word	0x40007c00
 8004dbc:	58000c00 	.word	0x58000c00
 8004dc0:	03d09000 	.word	0x03d09000
 8004dc4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004dd2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 824d 	beq.w	8005276 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	4aad      	ldr	r2, [pc, #692]	; (8005098 <UART_SetConfig+0x948>)
 8004de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dee:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d305      	bcc.n	8004e0c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e06:	6a3a      	ldr	r2, [r7, #32]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d903      	bls.n	8004e14 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e12:	e230      	b.n	8005276 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	4618      	mov	r0, r3
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	4a9d      	ldr	r2, [pc, #628]	; (8005098 <UART_SetConfig+0x948>)
 8004e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	f7fb fab6 	bl	80003a0 <__aeabi_uldivmod>
 8004e34:	4603      	mov	r3, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	f04f 0400 	mov.w	r4, #0
 8004e44:	0214      	lsls	r4, r2, #8
 8004e46:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e4a:	020b      	lsls	r3, r1, #8
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6852      	ldr	r2, [r2, #4]
 8004e50:	0852      	lsrs	r2, r2, #1
 8004e52:	4611      	mov	r1, r2
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	eb13 0b01 	adds.w	fp, r3, r1
 8004e5c:	eb44 0c02 	adc.w	ip, r4, r2
 8004e60:	4658      	mov	r0, fp
 8004e62:	4661      	mov	r1, ip
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	f7fb fa96 	bl	80003a0 <__aeabi_uldivmod>
 8004e74:	4603      	mov	r3, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d308      	bcc.n	8004e94 <UART_SetConfig+0x744>
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e88:	d204      	bcs.n	8004e94 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e1f0      	b.n	8005276 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e9a:	e1ec      	b.n	8005276 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea4:	f040 8100 	bne.w	80050a8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8004ea8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	f200 80b7 	bhi.w	8005020 <UART_SetConfig+0x8d0>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x768>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004fbd 	.word	0x08004fbd
 8004ebc:	08004fc5 	.word	0x08004fc5
 8004ec0:	08005021 	.word	0x08005021
 8004ec4:	08005021 	.word	0x08005021
 8004ec8:	08004fcd 	.word	0x08004fcd
 8004ecc:	08005021 	.word	0x08005021
 8004ed0:	08005021 	.word	0x08005021
 8004ed4:	08005021 	.word	0x08005021
 8004ed8:	08004fdd 	.word	0x08004fdd
 8004edc:	08005021 	.word	0x08005021
 8004ee0:	08005021 	.word	0x08005021
 8004ee4:	08005021 	.word	0x08005021
 8004ee8:	08005021 	.word	0x08005021
 8004eec:	08005021 	.word	0x08005021
 8004ef0:	08005021 	.word	0x08005021
 8004ef4:	08005021 	.word	0x08005021
 8004ef8:	08004fed 	.word	0x08004fed
 8004efc:	08005021 	.word	0x08005021
 8004f00:	08005021 	.word	0x08005021
 8004f04:	08005021 	.word	0x08005021
 8004f08:	08005021 	.word	0x08005021
 8004f0c:	08005021 	.word	0x08005021
 8004f10:	08005021 	.word	0x08005021
 8004f14:	08005021 	.word	0x08005021
 8004f18:	08005021 	.word	0x08005021
 8004f1c:	08005021 	.word	0x08005021
 8004f20:	08005021 	.word	0x08005021
 8004f24:	08005021 	.word	0x08005021
 8004f28:	08005021 	.word	0x08005021
 8004f2c:	08005021 	.word	0x08005021
 8004f30:	08005021 	.word	0x08005021
 8004f34:	08005021 	.word	0x08005021
 8004f38:	08005013 	.word	0x08005013
 8004f3c:	08005021 	.word	0x08005021
 8004f40:	08005021 	.word	0x08005021
 8004f44:	08005021 	.word	0x08005021
 8004f48:	08005021 	.word	0x08005021
 8004f4c:	08005021 	.word	0x08005021
 8004f50:	08005021 	.word	0x08005021
 8004f54:	08005021 	.word	0x08005021
 8004f58:	08005021 	.word	0x08005021
 8004f5c:	08005021 	.word	0x08005021
 8004f60:	08005021 	.word	0x08005021
 8004f64:	08005021 	.word	0x08005021
 8004f68:	08005021 	.word	0x08005021
 8004f6c:	08005021 	.word	0x08005021
 8004f70:	08005021 	.word	0x08005021
 8004f74:	08005021 	.word	0x08005021
 8004f78:	08005021 	.word	0x08005021
 8004f7c:	08005021 	.word	0x08005021
 8004f80:	08005021 	.word	0x08005021
 8004f84:	08005021 	.word	0x08005021
 8004f88:	08005021 	.word	0x08005021
 8004f8c:	08005021 	.word	0x08005021
 8004f90:	08005021 	.word	0x08005021
 8004f94:	08005021 	.word	0x08005021
 8004f98:	08005021 	.word	0x08005021
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005021 	.word	0x08005021
 8004fa4:	08005021 	.word	0x08005021
 8004fa8:	08005021 	.word	0x08005021
 8004fac:	08005021 	.word	0x08005021
 8004fb0:	08005021 	.word	0x08005021
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	08005019 	.word	0x08005019
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fd fee6 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8004fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004fc2:	e033      	b.n	800502c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fd fef8 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8004fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004fca:	e02f      	b.n	800502c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fcc:	f107 0314 	add.w	r3, r7, #20
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fe0b 	bl	8003bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fda:	e027      	b.n	800502c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fdc:	f107 0308 	add.w	r3, r7, #8
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe ff4f 	bl	8003e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fea:	e01f      	b.n	800502c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <UART_SetConfig+0x94c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <UART_SetConfig+0x94c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	08db      	lsrs	r3, r3, #3
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <UART_SetConfig+0x950>)
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800500c:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <UART_SetConfig+0x950>)
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005010:	e00c      	b.n	800502c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <UART_SetConfig+0x954>)
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005016:	e009      	b.n	800502c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800501e:	e005      	b.n	800502c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800502a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8121 	beq.w	8005276 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	4a17      	ldr	r2, [pc, #92]	; (8005098 <UART_SetConfig+0x948>)
 800503a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503e:	461a      	mov	r2, r3
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	fbb3 f3f2 	udiv	r3, r3, r2
 8005046:	005a      	lsls	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	441a      	add	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	b29b      	uxth	r3, r3
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d916      	bls.n	8005090 <UART_SetConfig+0x940>
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d212      	bcs.n	8005090 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	b29b      	uxth	r3, r3
 800506e:	f023 030f 	bic.w	r3, r3, #15
 8005072:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	b29a      	uxth	r2, r3
 8005080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005082:	4313      	orrs	r3, r2
 8005084:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	e0f2      	b.n	8005276 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005096:	e0ee      	b.n	8005276 <UART_SetConfig+0xb26>
 8005098:	08006c58 	.word	0x08006c58
 800509c:	58024400 	.word	0x58024400
 80050a0:	03d09000 	.word	0x03d09000
 80050a4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	f200 80b7 	bhi.w	8005220 <UART_SetConfig+0xad0>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x968>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080051bd 	.word	0x080051bd
 80050bc:	080051c5 	.word	0x080051c5
 80050c0:	08005221 	.word	0x08005221
 80050c4:	08005221 	.word	0x08005221
 80050c8:	080051cd 	.word	0x080051cd
 80050cc:	08005221 	.word	0x08005221
 80050d0:	08005221 	.word	0x08005221
 80050d4:	08005221 	.word	0x08005221
 80050d8:	080051dd 	.word	0x080051dd
 80050dc:	08005221 	.word	0x08005221
 80050e0:	08005221 	.word	0x08005221
 80050e4:	08005221 	.word	0x08005221
 80050e8:	08005221 	.word	0x08005221
 80050ec:	08005221 	.word	0x08005221
 80050f0:	08005221 	.word	0x08005221
 80050f4:	08005221 	.word	0x08005221
 80050f8:	080051ed 	.word	0x080051ed
 80050fc:	08005221 	.word	0x08005221
 8005100:	08005221 	.word	0x08005221
 8005104:	08005221 	.word	0x08005221
 8005108:	08005221 	.word	0x08005221
 800510c:	08005221 	.word	0x08005221
 8005110:	08005221 	.word	0x08005221
 8005114:	08005221 	.word	0x08005221
 8005118:	08005221 	.word	0x08005221
 800511c:	08005221 	.word	0x08005221
 8005120:	08005221 	.word	0x08005221
 8005124:	08005221 	.word	0x08005221
 8005128:	08005221 	.word	0x08005221
 800512c:	08005221 	.word	0x08005221
 8005130:	08005221 	.word	0x08005221
 8005134:	08005221 	.word	0x08005221
 8005138:	08005213 	.word	0x08005213
 800513c:	08005221 	.word	0x08005221
 8005140:	08005221 	.word	0x08005221
 8005144:	08005221 	.word	0x08005221
 8005148:	08005221 	.word	0x08005221
 800514c:	08005221 	.word	0x08005221
 8005150:	08005221 	.word	0x08005221
 8005154:	08005221 	.word	0x08005221
 8005158:	08005221 	.word	0x08005221
 800515c:	08005221 	.word	0x08005221
 8005160:	08005221 	.word	0x08005221
 8005164:	08005221 	.word	0x08005221
 8005168:	08005221 	.word	0x08005221
 800516c:	08005221 	.word	0x08005221
 8005170:	08005221 	.word	0x08005221
 8005174:	08005221 	.word	0x08005221
 8005178:	08005221 	.word	0x08005221
 800517c:	08005221 	.word	0x08005221
 8005180:	08005221 	.word	0x08005221
 8005184:	08005221 	.word	0x08005221
 8005188:	08005221 	.word	0x08005221
 800518c:	08005221 	.word	0x08005221
 8005190:	08005221 	.word	0x08005221
 8005194:	08005221 	.word	0x08005221
 8005198:	08005221 	.word	0x08005221
 800519c:	08005221 	.word	0x08005221
 80051a0:	08005221 	.word	0x08005221
 80051a4:	08005221 	.word	0x08005221
 80051a8:	08005221 	.word	0x08005221
 80051ac:	08005221 	.word	0x08005221
 80051b0:	08005221 	.word	0x08005221
 80051b4:	08005221 	.word	0x08005221
 80051b8:	08005219 	.word	0x08005219
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fd fde6 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 80051c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051c2:	e033      	b.n	800522c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c4:	f7fd fdf8 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 80051c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051ca:	e02f      	b.n	800522c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fd0b 	bl	8003bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051da:	e027      	b.n	800522c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fe4f 	bl	8003e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ea:	e01f      	b.n	800522c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <UART_SetConfig+0xb50>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051f8:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <UART_SetConfig+0xb50>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <UART_SetConfig+0xb54>)
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800520c:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <UART_SetConfig+0xb54>)
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <UART_SetConfig+0xb58>)
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005216:	e009      	b.n	800522c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800521e:	e005      	b.n	800522c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800522a:	bf00      	nop
    }

    if (pclk != 0U)
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d021      	beq.n	8005276 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <UART_SetConfig+0xb5c>)
 8005238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523c:	461a      	mov	r2, r3
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	fbb3 f2f2 	udiv	r2, r3, r2
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	441a      	add	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	b29b      	uxth	r3, r3
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	2b0f      	cmp	r3, #15
 800525c:	d908      	bls.n	8005270 <UART_SetConfig+0xb20>
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d204      	bcs.n	8005270 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e002      	b.n	8005276 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005292:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005296:	4618      	mov	r0, r3
 8005298:	3738      	adds	r7, #56	; 0x38
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80052a0:	58024400 	.word	0x58024400
 80052a4:	03d09000 	.word	0x03d09000
 80052a8:	003d0900 	.word	0x003d0900
 80052ac:	08006c58 	.word	0x08006c58

080052b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ae:	d10a      	bne.n	80053c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005404:	f7fc fa04 	bl	8001810 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b08      	cmp	r3, #8
 8005416:	d10e      	bne.n	8005436 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f82c 	bl	8005484 <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e022      	b.n	800547c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d10e      	bne.n	8005462 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f816 	bl	8005484 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e00c      	b.n	800547c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005494:	e062      	b.n	800555c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d05e      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fc f9b7 	bl	8001810 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11d      	bne.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054c2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e045      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d02e      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550c:	d126      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005516:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005526:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e00f      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4013      	ands	r3, r2
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2300      	movne	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	429a      	cmp	r2, r3
 8005578:	d08d      	beq.n	8005496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_UARTEx_DisableFifoMode+0x16>
 8005596:	2302      	movs	r3, #2
 8005598:	e027      	b.n	80055ea <HAL_UARTEx_DisableFifoMode+0x66>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2224      	movs	r2, #36	; 0x24
 80055a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800560a:	2302      	movs	r3, #2
 800560c:	e02d      	b.n	800566a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2224      	movs	r2, #36	; 0x24
 800561a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0201 	bic.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f850 	bl	80056f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005686:	2302      	movs	r3, #2
 8005688:	e02d      	b.n	80056e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2224      	movs	r2, #36	; 0x24
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f812 	bl	80056f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	; 0x24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80056f8:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80056fa:	f107 0314 	add.w	r3, r7, #20
 80056fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005702:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005706:	4a2d      	ldr	r2, [pc, #180]	; (80057bc <UARTEx_SetNbDataToProcess+0xcc>)
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005710:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005718:	2b00      	cmp	r3, #0
 800571a:	d108      	bne.n	800572e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800572c:	e03d      	b.n	80057aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800572e:	2310      	movs	r3, #16
 8005730:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005732:	2310      	movs	r3, #16
 8005734:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	0e5b      	lsrs	r3, r3, #25
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	0f5b      	lsrs	r3, r3, #29
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005756:	7fbb      	ldrb	r3, [r7, #30]
 8005758:	7f3a      	ldrb	r2, [r7, #28]
 800575a:	f107 0120 	add.w	r1, r7, #32
 800575e:	440a      	add	r2, r1
 8005760:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005764:	fb02 f303 	mul.w	r3, r2, r3
 8005768:	7f3a      	ldrb	r2, [r7, #28]
 800576a:	f107 0120 	add.w	r1, r7, #32
 800576e:	440a      	add	r2, r1
 8005770:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005774:	fb93 f3f2 	sdiv	r3, r3, r2
 8005778:	b29a      	uxth	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005780:	7ffb      	ldrb	r3, [r7, #31]
 8005782:	7f7a      	ldrb	r2, [r7, #29]
 8005784:	f107 0120 	add.w	r1, r7, #32
 8005788:	440a      	add	r2, r1
 800578a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	7f7a      	ldrb	r2, [r7, #29]
 8005794:	f107 0120 	add.w	r1, r7, #32
 8005798:	440a      	add	r2, r1
 800579a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800579e:	fb93 f3f2 	sdiv	r3, r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057aa:	bf00      	nop
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	08006c38 	.word	0x08006c38
 80057bc:	08006c40 	.word	0x08006c40

080057c0 <__errno>:
 80057c0:	4b01      	ldr	r3, [pc, #4]	; (80057c8 <__errno+0x8>)
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000040 	.word	0x20000040

080057cc <__sflush_r>:
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4605      	mov	r5, r0
 80057d4:	0710      	lsls	r0, r2, #28
 80057d6:	460c      	mov	r4, r1
 80057d8:	d458      	bmi.n	800588c <__sflush_r+0xc0>
 80057da:	684b      	ldr	r3, [r1, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc05      	bgt.n	80057ec <__sflush_r+0x20>
 80057e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc02      	bgt.n	80057ec <__sflush_r+0x20>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	d0f9      	beq.n	80057e6 <__sflush_r+0x1a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f8:	682f      	ldr	r7, [r5, #0]
 80057fa:	6a21      	ldr	r1, [r4, #32]
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	d032      	beq.n	8005866 <__sflush_r+0x9a>
 8005800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	075a      	lsls	r2, r3, #29
 8005806:	d505      	bpl.n	8005814 <__sflush_r+0x48>
 8005808:	6863      	ldr	r3, [r4, #4]
 800580a:	1ac0      	subs	r0, r0, r3
 800580c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800580e:	b10b      	cbz	r3, 8005814 <__sflush_r+0x48>
 8005810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005812:	1ac0      	subs	r0, r0, r3
 8005814:	2300      	movs	r3, #0
 8005816:	4602      	mov	r2, r0
 8005818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581a:	6a21      	ldr	r1, [r4, #32]
 800581c:	4628      	mov	r0, r5
 800581e:	47b0      	blx	r6
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	d106      	bne.n	8005834 <__sflush_r+0x68>
 8005826:	6829      	ldr	r1, [r5, #0]
 8005828:	291d      	cmp	r1, #29
 800582a:	d848      	bhi.n	80058be <__sflush_r+0xf2>
 800582c:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <__sflush_r+0x108>)
 800582e:	40ca      	lsrs	r2, r1
 8005830:	07d6      	lsls	r6, r2, #31
 8005832:	d544      	bpl.n	80058be <__sflush_r+0xf2>
 8005834:	2200      	movs	r2, #0
 8005836:	6062      	str	r2, [r4, #4]
 8005838:	04d9      	lsls	r1, r3, #19
 800583a:	6922      	ldr	r2, [r4, #16]
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	d504      	bpl.n	800584a <__sflush_r+0x7e>
 8005840:	1c42      	adds	r2, r0, #1
 8005842:	d101      	bne.n	8005848 <__sflush_r+0x7c>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b903      	cbnz	r3, 800584a <__sflush_r+0x7e>
 8005848:	6560      	str	r0, [r4, #84]	; 0x54
 800584a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584c:	602f      	str	r7, [r5, #0]
 800584e:	2900      	cmp	r1, #0
 8005850:	d0c9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005856:	4299      	cmp	r1, r3
 8005858:	d002      	beq.n	8005860 <__sflush_r+0x94>
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f976 	bl	8005b4c <_free_r>
 8005860:	2000      	movs	r0, #0
 8005862:	6360      	str	r0, [r4, #52]	; 0x34
 8005864:	e7c0      	b.n	80057e8 <__sflush_r+0x1c>
 8005866:	2301      	movs	r3, #1
 8005868:	4628      	mov	r0, r5
 800586a:	47b0      	blx	r6
 800586c:	1c41      	adds	r1, r0, #1
 800586e:	d1c8      	bne.n	8005802 <__sflush_r+0x36>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0c5      	beq.n	8005802 <__sflush_r+0x36>
 8005876:	2b1d      	cmp	r3, #29
 8005878:	d001      	beq.n	800587e <__sflush_r+0xb2>
 800587a:	2b16      	cmp	r3, #22
 800587c:	d101      	bne.n	8005882 <__sflush_r+0xb6>
 800587e:	602f      	str	r7, [r5, #0]
 8005880:	e7b1      	b.n	80057e6 <__sflush_r+0x1a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7ad      	b.n	80057e8 <__sflush_r+0x1c>
 800588c:	690f      	ldr	r7, [r1, #16]
 800588e:	2f00      	cmp	r7, #0
 8005890:	d0a9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005892:	0793      	lsls	r3, r2, #30
 8005894:	680e      	ldr	r6, [r1, #0]
 8005896:	bf08      	it	eq
 8005898:	694b      	ldreq	r3, [r1, #20]
 800589a:	600f      	str	r7, [r1, #0]
 800589c:	bf18      	it	ne
 800589e:	2300      	movne	r3, #0
 80058a0:	eba6 0807 	sub.w	r8, r6, r7
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	dd9c      	ble.n	80057e6 <__sflush_r+0x1a>
 80058ac:	4643      	mov	r3, r8
 80058ae:	463a      	mov	r2, r7
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc06      	bgt.n	80058ca <__sflush_r+0xfe>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e78e      	b.n	80057e8 <__sflush_r+0x1c>
 80058ca:	4407      	add	r7, r0
 80058cc:	eba8 0800 	sub.w	r8, r8, r0
 80058d0:	e7e9      	b.n	80058a6 <__sflush_r+0xda>
 80058d2:	bf00      	nop
 80058d4:	20400001 	.word	0x20400001

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b1db      	cbz	r3, 800591a <_fflush_r+0x42>
 80058e2:	b118      	cbz	r0, 80058ec <_fflush_r+0x14>
 80058e4:	6983      	ldr	r3, [r0, #24]
 80058e6:	b90b      	cbnz	r3, 80058ec <_fflush_r+0x14>
 80058e8:	f000 f872 	bl	80059d0 <__sinit>
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <_fflush_r+0x48>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d109      	bne.n	8005906 <_fflush_r+0x2e>
 80058f2:	686c      	ldr	r4, [r5, #4]
 80058f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f8:	b17b      	cbz	r3, 800591a <_fflush_r+0x42>
 80058fa:	4621      	mov	r1, r4
 80058fc:	4628      	mov	r0, r5
 80058fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005902:	f7ff bf63 	b.w	80057cc <__sflush_r>
 8005906:	4b07      	ldr	r3, [pc, #28]	; (8005924 <_fflush_r+0x4c>)
 8005908:	429c      	cmp	r4, r3
 800590a:	d101      	bne.n	8005910 <_fflush_r+0x38>
 800590c:	68ac      	ldr	r4, [r5, #8]
 800590e:	e7f1      	b.n	80058f4 <_fflush_r+0x1c>
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <_fflush_r+0x50>)
 8005912:	429c      	cmp	r4, r3
 8005914:	bf08      	it	eq
 8005916:	68ec      	ldreq	r4, [r5, #12]
 8005918:	e7ec      	b.n	80058f4 <_fflush_r+0x1c>
 800591a:	2000      	movs	r0, #0
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	08006c90 	.word	0x08006c90
 8005924:	08006cb0 	.word	0x08006cb0
 8005928:	08006c70 	.word	0x08006c70

0800592c <fflush>:
 800592c:	4601      	mov	r1, r0
 800592e:	b920      	cbnz	r0, 800593a <fflush+0xe>
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <fflush+0x18>)
 8005932:	4905      	ldr	r1, [pc, #20]	; (8005948 <fflush+0x1c>)
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	f000 b8b7 	b.w	8005aa8 <_fwalk_reent>
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <fflush+0x20>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f7ff bfcb 	b.w	80058d8 <_fflush_r>
 8005942:	bf00      	nop
 8005944:	08006cd0 	.word	0x08006cd0
 8005948:	080058d9 	.word	0x080058d9
 800594c:	20000040 	.word	0x20000040

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	6083      	str	r3, [r0, #8]
 800595c:	8181      	strh	r1, [r0, #12]
 800595e:	6643      	str	r3, [r0, #100]	; 0x64
 8005960:	81c2      	strh	r2, [r0, #14]
 8005962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f000 f8e5 	bl	8005b3c <memset>
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x38>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x3c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x40>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x44>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	6323      	str	r3, [r4, #48]	; 0x30
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	08005e1d 	.word	0x08005e1d
 800598c:	08005e3f 	.word	0x08005e3f
 8005990:	08005e77 	.word	0x08005e77
 8005994:	08005e9b 	.word	0x08005e9b

08005998 <_cleanup_r>:
 8005998:	4901      	ldr	r1, [pc, #4]	; (80059a0 <_cleanup_r+0x8>)
 800599a:	f000 b885 	b.w	8005aa8 <_fwalk_reent>
 800599e:	bf00      	nop
 80059a0:	080058d9 	.word	0x080058d9

080059a4 <__sfmoreglue>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	1e4a      	subs	r2, r1, #1
 80059a8:	2568      	movs	r5, #104	; 0x68
 80059aa:	4355      	muls	r5, r2
 80059ac:	460e      	mov	r6, r1
 80059ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b2:	f000 f919 	bl	8005be8 <_malloc_r>
 80059b6:	4604      	mov	r4, r0
 80059b8:	b140      	cbz	r0, 80059cc <__sfmoreglue+0x28>
 80059ba:	2100      	movs	r1, #0
 80059bc:	e9c0 1600 	strd	r1, r6, [r0]
 80059c0:	300c      	adds	r0, #12
 80059c2:	60a0      	str	r0, [r4, #8]
 80059c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c8:	f000 f8b8 	bl	8005b3c <memset>
 80059cc:	4620      	mov	r0, r4
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__sinit>:
 80059d0:	6983      	ldr	r3, [r0, #24]
 80059d2:	b510      	push	{r4, lr}
 80059d4:	4604      	mov	r4, r0
 80059d6:	bb33      	cbnz	r3, 8005a26 <__sinit+0x56>
 80059d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80059dc:	6503      	str	r3, [r0, #80]	; 0x50
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <__sinit+0x58>)
 80059e0:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <__sinit+0x5c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6282      	str	r2, [r0, #40]	; 0x28
 80059e6:	4298      	cmp	r0, r3
 80059e8:	bf04      	itt	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	6183      	streq	r3, [r0, #24]
 80059ee:	f000 f81f 	bl	8005a30 <__sfp>
 80059f2:	6060      	str	r0, [r4, #4]
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 f81b 	bl	8005a30 <__sfp>
 80059fa:	60a0      	str	r0, [r4, #8]
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 f817 	bl	8005a30 <__sfp>
 8005a02:	2200      	movs	r2, #0
 8005a04:	60e0      	str	r0, [r4, #12]
 8005a06:	2104      	movs	r1, #4
 8005a08:	6860      	ldr	r0, [r4, #4]
 8005a0a:	f7ff ffa1 	bl	8005950 <std>
 8005a0e:	2201      	movs	r2, #1
 8005a10:	2109      	movs	r1, #9
 8005a12:	68a0      	ldr	r0, [r4, #8]
 8005a14:	f7ff ff9c 	bl	8005950 <std>
 8005a18:	2202      	movs	r2, #2
 8005a1a:	2112      	movs	r1, #18
 8005a1c:	68e0      	ldr	r0, [r4, #12]
 8005a1e:	f7ff ff97 	bl	8005950 <std>
 8005a22:	2301      	movs	r3, #1
 8005a24:	61a3      	str	r3, [r4, #24]
 8005a26:	bd10      	pop	{r4, pc}
 8005a28:	08006cd0 	.word	0x08006cd0
 8005a2c:	08005999 	.word	0x08005999

08005a30 <__sfp>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <__sfp+0x70>)
 8005a34:	681e      	ldr	r6, [r3, #0]
 8005a36:	69b3      	ldr	r3, [r6, #24]
 8005a38:	4607      	mov	r7, r0
 8005a3a:	b913      	cbnz	r3, 8005a42 <__sfp+0x12>
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff ffc7 	bl	80059d0 <__sinit>
 8005a42:	3648      	adds	r6, #72	; 0x48
 8005a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	d503      	bpl.n	8005a54 <__sfp+0x24>
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	b133      	cbz	r3, 8005a5e <__sfp+0x2e>
 8005a50:	6836      	ldr	r6, [r6, #0]
 8005a52:	e7f7      	b.n	8005a44 <__sfp+0x14>
 8005a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a58:	b16d      	cbz	r5, 8005a76 <__sfp+0x46>
 8005a5a:	3468      	adds	r4, #104	; 0x68
 8005a5c:	e7f4      	b.n	8005a48 <__sfp+0x18>
 8005a5e:	2104      	movs	r1, #4
 8005a60:	4638      	mov	r0, r7
 8005a62:	f7ff ff9f 	bl	80059a4 <__sfmoreglue>
 8005a66:	6030      	str	r0, [r6, #0]
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d1f1      	bne.n	8005a50 <__sfp+0x20>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4604      	mov	r4, r0
 8005a72:	4620      	mov	r0, r4
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <__sfp+0x74>)
 8005a78:	6665      	str	r5, [r4, #100]	; 0x64
 8005a7a:	e9c4 5500 	strd	r5, r5, [r4]
 8005a7e:	60a5      	str	r5, [r4, #8]
 8005a80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005a84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a90:	f000 f854 	bl	8005b3c <memset>
 8005a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a9c:	e7e9      	b.n	8005a72 <__sfp+0x42>
 8005a9e:	bf00      	nop
 8005aa0:	08006cd0 	.word	0x08006cd0
 8005aa4:	ffff0001 	.word	0xffff0001

08005aa8 <_fwalk_reent>:
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aac:	4680      	mov	r8, r0
 8005aae:	4689      	mov	r9, r1
 8005ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	b914      	cbnz	r4, 8005abe <_fwalk_reent+0x16>
 8005ab8:	4630      	mov	r0, r6
 8005aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005ac2:	3f01      	subs	r7, #1
 8005ac4:	d501      	bpl.n	8005aca <_fwalk_reent+0x22>
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	e7f5      	b.n	8005ab6 <_fwalk_reent+0xe>
 8005aca:	89ab      	ldrh	r3, [r5, #12]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d907      	bls.n	8005ae0 <_fwalk_reent+0x38>
 8005ad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	d003      	beq.n	8005ae0 <_fwalk_reent+0x38>
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4640      	mov	r0, r8
 8005adc:	47c8      	blx	r9
 8005ade:	4306      	orrs	r6, r0
 8005ae0:	3568      	adds	r5, #104	; 0x68
 8005ae2:	e7ee      	b.n	8005ac2 <_fwalk_reent+0x1a>

08005ae4 <__libc_init_array>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4e0d      	ldr	r6, [pc, #52]	; (8005b1c <__libc_init_array+0x38>)
 8005ae8:	4c0d      	ldr	r4, [pc, #52]	; (8005b20 <__libc_init_array+0x3c>)
 8005aea:	1ba4      	subs	r4, r4, r6
 8005aec:	10a4      	asrs	r4, r4, #2
 8005aee:	2500      	movs	r5, #0
 8005af0:	42a5      	cmp	r5, r4
 8005af2:	d109      	bne.n	8005b08 <__libc_init_array+0x24>
 8005af4:	4e0b      	ldr	r6, [pc, #44]	; (8005b24 <__libc_init_array+0x40>)
 8005af6:	4c0c      	ldr	r4, [pc, #48]	; (8005b28 <__libc_init_array+0x44>)
 8005af8:	f000 ffce 	bl	8006a98 <_init>
 8005afc:	1ba4      	subs	r4, r4, r6
 8005afe:	10a4      	asrs	r4, r4, #2
 8005b00:	2500      	movs	r5, #0
 8005b02:	42a5      	cmp	r5, r4
 8005b04:	d105      	bne.n	8005b12 <__libc_init_array+0x2e>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b0c:	4798      	blx	r3
 8005b0e:	3501      	adds	r5, #1
 8005b10:	e7ee      	b.n	8005af0 <__libc_init_array+0xc>
 8005b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b16:	4798      	blx	r3
 8005b18:	3501      	adds	r5, #1
 8005b1a:	e7f2      	b.n	8005b02 <__libc_init_array+0x1e>
 8005b1c:	08006d10 	.word	0x08006d10
 8005b20:	08006d10 	.word	0x08006d10
 8005b24:	08006d10 	.word	0x08006d10
 8005b28:	08006d14 	.word	0x08006d14

08005b2c <malloc>:
 8005b2c:	4b02      	ldr	r3, [pc, #8]	; (8005b38 <malloc+0xc>)
 8005b2e:	4601      	mov	r1, r0
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	f000 b859 	b.w	8005be8 <_malloc_r>
 8005b36:	bf00      	nop
 8005b38:	20000040 	.word	0x20000040

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <_free_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4605      	mov	r5, r0
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d045      	beq.n	8005be0 <_free_r+0x94>
 8005b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b58:	1f0c      	subs	r4, r1, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfb8      	it	lt
 8005b5e:	18e4      	addlt	r4, r4, r3
 8005b60:	f000 faf8 	bl	8006154 <__malloc_lock>
 8005b64:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <_free_r+0x98>)
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	4610      	mov	r0, r2
 8005b6a:	b933      	cbnz	r3, 8005b7a <_free_r+0x2e>
 8005b6c:	6063      	str	r3, [r4, #4]
 8005b6e:	6014      	str	r4, [r2, #0]
 8005b70:	4628      	mov	r0, r5
 8005b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b76:	f000 baee 	b.w	8006156 <__malloc_unlock>
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	d90c      	bls.n	8005b98 <_free_r+0x4c>
 8005b7e:	6821      	ldr	r1, [r4, #0]
 8005b80:	1862      	adds	r2, r4, r1
 8005b82:	4293      	cmp	r3, r2
 8005b84:	bf04      	itt	eq
 8005b86:	681a      	ldreq	r2, [r3, #0]
 8005b88:	685b      	ldreq	r3, [r3, #4]
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	bf04      	itt	eq
 8005b8e:	1852      	addeq	r2, r2, r1
 8005b90:	6022      	streq	r2, [r4, #0]
 8005b92:	6004      	str	r4, [r0, #0]
 8005b94:	e7ec      	b.n	8005b70 <_free_r+0x24>
 8005b96:	4613      	mov	r3, r2
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	b10a      	cbz	r2, 8005ba0 <_free_r+0x54>
 8005b9c:	42a2      	cmp	r2, r4
 8005b9e:	d9fa      	bls.n	8005b96 <_free_r+0x4a>
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	1858      	adds	r0, r3, r1
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d10b      	bne.n	8005bc0 <_free_r+0x74>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	4401      	add	r1, r0
 8005bac:	1858      	adds	r0, r3, r1
 8005bae:	4282      	cmp	r2, r0
 8005bb0:	6019      	str	r1, [r3, #0]
 8005bb2:	d1dd      	bne.n	8005b70 <_free_r+0x24>
 8005bb4:	6810      	ldr	r0, [r2, #0]
 8005bb6:	6852      	ldr	r2, [r2, #4]
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	4401      	add	r1, r0
 8005bbc:	6019      	str	r1, [r3, #0]
 8005bbe:	e7d7      	b.n	8005b70 <_free_r+0x24>
 8005bc0:	d902      	bls.n	8005bc8 <_free_r+0x7c>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	e7d3      	b.n	8005b70 <_free_r+0x24>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428a      	cmp	r2, r1
 8005bce:	bf04      	itt	eq
 8005bd0:	6811      	ldreq	r1, [r2, #0]
 8005bd2:	6852      	ldreq	r2, [r2, #4]
 8005bd4:	6062      	str	r2, [r4, #4]
 8005bd6:	bf04      	itt	eq
 8005bd8:	1809      	addeq	r1, r1, r0
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	605c      	str	r4, [r3, #4]
 8005bde:	e7c7      	b.n	8005b70 <_free_r+0x24>
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
 8005be2:	bf00      	nop
 8005be4:	200000c4 	.word	0x200000c4

08005be8 <_malloc_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	1ccd      	adds	r5, r1, #3
 8005bec:	f025 0503 	bic.w	r5, r5, #3
 8005bf0:	3508      	adds	r5, #8
 8005bf2:	2d0c      	cmp	r5, #12
 8005bf4:	bf38      	it	cc
 8005bf6:	250c      	movcc	r5, #12
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	db01      	blt.n	8005c02 <_malloc_r+0x1a>
 8005bfe:	42a9      	cmp	r1, r5
 8005c00:	d903      	bls.n	8005c0a <_malloc_r+0x22>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6033      	str	r3, [r6, #0]
 8005c06:	2000      	movs	r0, #0
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	f000 faa3 	bl	8006154 <__malloc_lock>
 8005c0e:	4a21      	ldr	r2, [pc, #132]	; (8005c94 <_malloc_r+0xac>)
 8005c10:	6814      	ldr	r4, [r2, #0]
 8005c12:	4621      	mov	r1, r4
 8005c14:	b991      	cbnz	r1, 8005c3c <_malloc_r+0x54>
 8005c16:	4c20      	ldr	r4, [pc, #128]	; (8005c98 <_malloc_r+0xb0>)
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	b91b      	cbnz	r3, 8005c24 <_malloc_r+0x3c>
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f000 f8b9 	bl	8005d94 <_sbrk_r>
 8005c22:	6020      	str	r0, [r4, #0]
 8005c24:	4629      	mov	r1, r5
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f8b4 	bl	8005d94 <_sbrk_r>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d124      	bne.n	8005c7a <_malloc_r+0x92>
 8005c30:	230c      	movs	r3, #12
 8005c32:	6033      	str	r3, [r6, #0]
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 fa8e 	bl	8006156 <__malloc_unlock>
 8005c3a:	e7e4      	b.n	8005c06 <_malloc_r+0x1e>
 8005c3c:	680b      	ldr	r3, [r1, #0]
 8005c3e:	1b5b      	subs	r3, r3, r5
 8005c40:	d418      	bmi.n	8005c74 <_malloc_r+0x8c>
 8005c42:	2b0b      	cmp	r3, #11
 8005c44:	d90f      	bls.n	8005c66 <_malloc_r+0x7e>
 8005c46:	600b      	str	r3, [r1, #0]
 8005c48:	50cd      	str	r5, [r1, r3]
 8005c4a:	18cc      	adds	r4, r1, r3
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 fa82 	bl	8006156 <__malloc_unlock>
 8005c52:	f104 000b 	add.w	r0, r4, #11
 8005c56:	1d23      	adds	r3, r4, #4
 8005c58:	f020 0007 	bic.w	r0, r0, #7
 8005c5c:	1ac3      	subs	r3, r0, r3
 8005c5e:	d0d3      	beq.n	8005c08 <_malloc_r+0x20>
 8005c60:	425a      	negs	r2, r3
 8005c62:	50e2      	str	r2, [r4, r3]
 8005c64:	e7d0      	b.n	8005c08 <_malloc_r+0x20>
 8005c66:	428c      	cmp	r4, r1
 8005c68:	684b      	ldr	r3, [r1, #4]
 8005c6a:	bf16      	itet	ne
 8005c6c:	6063      	strne	r3, [r4, #4]
 8005c6e:	6013      	streq	r3, [r2, #0]
 8005c70:	460c      	movne	r4, r1
 8005c72:	e7eb      	b.n	8005c4c <_malloc_r+0x64>
 8005c74:	460c      	mov	r4, r1
 8005c76:	6849      	ldr	r1, [r1, #4]
 8005c78:	e7cc      	b.n	8005c14 <_malloc_r+0x2c>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d005      	beq.n	8005c90 <_malloc_r+0xa8>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4630      	mov	r0, r6
 8005c88:	f000 f884 	bl	8005d94 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d0cf      	beq.n	8005c30 <_malloc_r+0x48>
 8005c90:	6025      	str	r5, [r4, #0]
 8005c92:	e7db      	b.n	8005c4c <_malloc_r+0x64>
 8005c94:	200000c4 	.word	0x200000c4
 8005c98:	200000c8 	.word	0x200000c8

08005c9c <iprintf>:
 8005c9c:	b40f      	push	{r0, r1, r2, r3}
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <iprintf+0x2c>)
 8005ca0:	b513      	push	{r0, r1, r4, lr}
 8005ca2:	681c      	ldr	r4, [r3, #0]
 8005ca4:	b124      	cbz	r4, 8005cb0 <iprintf+0x14>
 8005ca6:	69a3      	ldr	r3, [r4, #24]
 8005ca8:	b913      	cbnz	r3, 8005cb0 <iprintf+0x14>
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff fe90 	bl	80059d0 <__sinit>
 8005cb0:	ab05      	add	r3, sp, #20
 8005cb2:	9a04      	ldr	r2, [sp, #16]
 8005cb4:	68a1      	ldr	r1, [r4, #8]
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fbc9 	bl	8006450 <_vfiprintf_r>
 8005cbe:	b002      	add	sp, #8
 8005cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc4:	b004      	add	sp, #16
 8005cc6:	4770      	bx	lr
 8005cc8:	20000040 	.word	0x20000040

08005ccc <_puts_r>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	460e      	mov	r6, r1
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	b118      	cbz	r0, 8005cdc <_puts_r+0x10>
 8005cd4:	6983      	ldr	r3, [r0, #24]
 8005cd6:	b90b      	cbnz	r3, 8005cdc <_puts_r+0x10>
 8005cd8:	f7ff fe7a 	bl	80059d0 <__sinit>
 8005cdc:	69ab      	ldr	r3, [r5, #24]
 8005cde:	68ac      	ldr	r4, [r5, #8]
 8005ce0:	b913      	cbnz	r3, 8005ce8 <_puts_r+0x1c>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7ff fe74 	bl	80059d0 <__sinit>
 8005ce8:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <_puts_r+0xac>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d117      	bne.n	8005d1e <_puts_r+0x52>
 8005cee:	686c      	ldr	r4, [r5, #4]
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	071b      	lsls	r3, r3, #28
 8005cf4:	d51d      	bpl.n	8005d32 <_puts_r+0x66>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	b1db      	cbz	r3, 8005d32 <_puts_r+0x66>
 8005cfa:	3e01      	subs	r6, #1
 8005cfc:	68a3      	ldr	r3, [r4, #8]
 8005cfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d02:	3b01      	subs	r3, #1
 8005d04:	60a3      	str	r3, [r4, #8]
 8005d06:	b9e9      	cbnz	r1, 8005d44 <_puts_r+0x78>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da2e      	bge.n	8005d6a <_puts_r+0x9e>
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	210a      	movs	r1, #10
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 f8c7 	bl	8005ea4 <__swbuf_r>
 8005d16:	3001      	adds	r0, #1
 8005d18:	d011      	beq.n	8005d3e <_puts_r+0x72>
 8005d1a:	200a      	movs	r0, #10
 8005d1c:	e011      	b.n	8005d42 <_puts_r+0x76>
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <_puts_r+0xb0>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	d101      	bne.n	8005d28 <_puts_r+0x5c>
 8005d24:	68ac      	ldr	r4, [r5, #8]
 8005d26:	e7e3      	b.n	8005cf0 <_puts_r+0x24>
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <_puts_r+0xb4>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	bf08      	it	eq
 8005d2e:	68ec      	ldreq	r4, [r5, #12]
 8005d30:	e7de      	b.n	8005cf0 <_puts_r+0x24>
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 f919 	bl	8005f6c <__swsetup_r>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0dd      	beq.n	8005cfa <_puts_r+0x2e>
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da04      	bge.n	8005d52 <_puts_r+0x86>
 8005d48:	69a2      	ldr	r2, [r4, #24]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	dc06      	bgt.n	8005d5c <_puts_r+0x90>
 8005d4e:	290a      	cmp	r1, #10
 8005d50:	d004      	beq.n	8005d5c <_puts_r+0x90>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	7019      	strb	r1, [r3, #0]
 8005d5a:	e7cf      	b.n	8005cfc <_puts_r+0x30>
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 f8a0 	bl	8005ea4 <__swbuf_r>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d1c9      	bne.n	8005cfc <_puts_r+0x30>
 8005d68:	e7e9      	b.n	8005d3e <_puts_r+0x72>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	200a      	movs	r0, #10
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	6022      	str	r2, [r4, #0]
 8005d72:	7018      	strb	r0, [r3, #0]
 8005d74:	e7e5      	b.n	8005d42 <_puts_r+0x76>
 8005d76:	bf00      	nop
 8005d78:	08006c90 	.word	0x08006c90
 8005d7c:	08006cb0 	.word	0x08006cb0
 8005d80:	08006c70 	.word	0x08006c70

08005d84 <puts>:
 8005d84:	4b02      	ldr	r3, [pc, #8]	; (8005d90 <puts+0xc>)
 8005d86:	4601      	mov	r1, r0
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	f7ff bf9f 	b.w	8005ccc <_puts_r>
 8005d8e:	bf00      	nop
 8005d90:	20000040 	.word	0x20000040

08005d94 <_sbrk_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4c06      	ldr	r4, [pc, #24]	; (8005db0 <_sbrk_r+0x1c>)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	f7fb fc50 	bl	8001644 <_sbrk>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_sbrk_r+0x1a>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_sbrk_r+0x1a>
 8005dac:	602b      	str	r3, [r5, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	20000218 	.word	0x20000218

08005db4 <sniprintf>:
 8005db4:	b40c      	push	{r2, r3}
 8005db6:	b530      	push	{r4, r5, lr}
 8005db8:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <sniprintf+0x64>)
 8005dba:	1e0c      	subs	r4, r1, #0
 8005dbc:	b09d      	sub	sp, #116	; 0x74
 8005dbe:	681d      	ldr	r5, [r3, #0]
 8005dc0:	da08      	bge.n	8005dd4 <sniprintf+0x20>
 8005dc2:	238b      	movs	r3, #139	; 0x8b
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	b01d      	add	sp, #116	; 0x74
 8005dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dd0:	b002      	add	sp, #8
 8005dd2:	4770      	bx	lr
 8005dd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ddc:	bf14      	ite	ne
 8005dde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005de2:	4623      	moveq	r3, r4
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	9307      	str	r3, [sp, #28]
 8005de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dec:	9002      	str	r0, [sp, #8]
 8005dee:	9006      	str	r0, [sp, #24]
 8005df0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005df4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005df6:	ab21      	add	r3, sp, #132	; 0x84
 8005df8:	a902      	add	r1, sp, #8
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f000 fa05 	bl	800620c <_svfiprintf_r>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	bfbc      	itt	lt
 8005e06:	238b      	movlt	r3, #139	; 0x8b
 8005e08:	602b      	strlt	r3, [r5, #0]
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	d0dd      	beq.n	8005dca <sniprintf+0x16>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e7d9      	b.n	8005dca <sniprintf+0x16>
 8005e16:	bf00      	nop
 8005e18:	20000040 	.word	0x20000040

08005e1c <__sread>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	460c      	mov	r4, r1
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	f000 fdb2 	bl	800698c <_read_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	bfab      	itete	ge
 8005e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e30:	181b      	addge	r3, r3, r0
 8005e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e36:	bfac      	ite	ge
 8005e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e3a:	81a3      	strhlt	r3, [r4, #12]
 8005e3c:	bd10      	pop	{r4, pc}

08005e3e <__swrite>:
 8005e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	461f      	mov	r7, r3
 8005e44:	898b      	ldrh	r3, [r1, #12]
 8005e46:	05db      	lsls	r3, r3, #23
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	d505      	bpl.n	8005e5c <__swrite+0x1e>
 8005e50:	2302      	movs	r3, #2
 8005e52:	2200      	movs	r2, #0
 8005e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e58:	f000 f906 	bl	8006068 <_lseek_r>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	4632      	mov	r2, r6
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	f000 b869 	b.w	8005f48 <_write_r>

08005e76 <__sseek>:
 8005e76:	b510      	push	{r4, lr}
 8005e78:	460c      	mov	r4, r1
 8005e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7e:	f000 f8f3 	bl	8006068 <_lseek_r>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	bf15      	itete	ne
 8005e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e92:	81a3      	strheq	r3, [r4, #12]
 8005e94:	bf18      	it	ne
 8005e96:	81a3      	strhne	r3, [r4, #12]
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <__sclose>:
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 b8d3 	b.w	8006048 <_close_r>
	...

08005ea4 <__swbuf_r>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	460e      	mov	r6, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	4605      	mov	r5, r0
 8005eac:	b118      	cbz	r0, 8005eb6 <__swbuf_r+0x12>
 8005eae:	6983      	ldr	r3, [r0, #24]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <__swbuf_r+0x12>
 8005eb2:	f7ff fd8d 	bl	80059d0 <__sinit>
 8005eb6:	4b21      	ldr	r3, [pc, #132]	; (8005f3c <__swbuf_r+0x98>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	d12a      	bne.n	8005f12 <__swbuf_r+0x6e>
 8005ebc:	686c      	ldr	r4, [r5, #4]
 8005ebe:	69a3      	ldr	r3, [r4, #24]
 8005ec0:	60a3      	str	r3, [r4, #8]
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	071a      	lsls	r2, r3, #28
 8005ec6:	d52e      	bpl.n	8005f26 <__swbuf_r+0x82>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	b363      	cbz	r3, 8005f26 <__swbuf_r+0x82>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	1ac0      	subs	r0, r0, r3
 8005ed2:	6963      	ldr	r3, [r4, #20]
 8005ed4:	b2f6      	uxtb	r6, r6
 8005ed6:	4283      	cmp	r3, r0
 8005ed8:	4637      	mov	r7, r6
 8005eda:	dc04      	bgt.n	8005ee6 <__swbuf_r+0x42>
 8005edc:	4621      	mov	r1, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f7ff fcfa 	bl	80058d8 <_fflush_r>
 8005ee4:	bb28      	cbnz	r0, 8005f32 <__swbuf_r+0x8e>
 8005ee6:	68a3      	ldr	r3, [r4, #8]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	60a3      	str	r3, [r4, #8]
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	6022      	str	r2, [r4, #0]
 8005ef2:	701e      	strb	r6, [r3, #0]
 8005ef4:	6963      	ldr	r3, [r4, #20]
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	4283      	cmp	r3, r0
 8005efa:	d004      	beq.n	8005f06 <__swbuf_r+0x62>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	07db      	lsls	r3, r3, #31
 8005f00:	d519      	bpl.n	8005f36 <__swbuf_r+0x92>
 8005f02:	2e0a      	cmp	r6, #10
 8005f04:	d117      	bne.n	8005f36 <__swbuf_r+0x92>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f7ff fce5 	bl	80058d8 <_fflush_r>
 8005f0e:	b190      	cbz	r0, 8005f36 <__swbuf_r+0x92>
 8005f10:	e00f      	b.n	8005f32 <__swbuf_r+0x8e>
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <__swbuf_r+0x9c>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d101      	bne.n	8005f1c <__swbuf_r+0x78>
 8005f18:	68ac      	ldr	r4, [r5, #8]
 8005f1a:	e7d0      	b.n	8005ebe <__swbuf_r+0x1a>
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <__swbuf_r+0xa0>)
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	bf08      	it	eq
 8005f22:	68ec      	ldreq	r4, [r5, #12]
 8005f24:	e7cb      	b.n	8005ebe <__swbuf_r+0x1a>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 f81f 	bl	8005f6c <__swsetup_r>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d0cc      	beq.n	8005ecc <__swbuf_r+0x28>
 8005f32:	f04f 37ff 	mov.w	r7, #4294967295
 8005f36:	4638      	mov	r0, r7
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08006c90 	.word	0x08006c90
 8005f40:	08006cb0 	.word	0x08006cb0
 8005f44:	08006c70 	.word	0x08006c70

08005f48 <_write_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4c07      	ldr	r4, [pc, #28]	; (8005f68 <_write_r+0x20>)
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	4608      	mov	r0, r1
 8005f50:	4611      	mov	r1, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fb fb23 	bl	80015a2 <_write>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_write_r+0x1e>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_write_r+0x1e>
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	20000218 	.word	0x20000218

08005f6c <__swsetup_r>:
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <__swsetup_r+0xcc>)
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	681d      	ldr	r5, [r3, #0]
 8005f72:	4606      	mov	r6, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	b125      	cbz	r5, 8005f82 <__swsetup_r+0x16>
 8005f78:	69ab      	ldr	r3, [r5, #24]
 8005f7a:	b913      	cbnz	r3, 8005f82 <__swsetup_r+0x16>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fd27 	bl	80059d0 <__sinit>
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <__swsetup_r+0xd0>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d10f      	bne.n	8005fa8 <__swsetup_r+0x3c>
 8005f88:	686c      	ldr	r4, [r5, #4]
 8005f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	0715      	lsls	r5, r2, #28
 8005f92:	d42c      	bmi.n	8005fee <__swsetup_r+0x82>
 8005f94:	06d0      	lsls	r0, r2, #27
 8005f96:	d411      	bmi.n	8005fbc <__swsetup_r+0x50>
 8005f98:	2209      	movs	r2, #9
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	e03e      	b.n	8006026 <__swsetup_r+0xba>
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <__swsetup_r+0xd4>)
 8005faa:	429c      	cmp	r4, r3
 8005fac:	d101      	bne.n	8005fb2 <__swsetup_r+0x46>
 8005fae:	68ac      	ldr	r4, [r5, #8]
 8005fb0:	e7eb      	b.n	8005f8a <__swsetup_r+0x1e>
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <__swsetup_r+0xd8>)
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	bf08      	it	eq
 8005fb8:	68ec      	ldreq	r4, [r5, #12]
 8005fba:	e7e6      	b.n	8005f8a <__swsetup_r+0x1e>
 8005fbc:	0751      	lsls	r1, r2, #29
 8005fbe:	d512      	bpl.n	8005fe6 <__swsetup_r+0x7a>
 8005fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc2:	b141      	cbz	r1, 8005fd6 <__swsetup_r+0x6a>
 8005fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d002      	beq.n	8005fd2 <__swsetup_r+0x66>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f7ff fdbd 	bl	8005b4c <_free_r>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f043 0308 	orr.w	r3, r3, #8
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	b94b      	cbnz	r3, 8006006 <__swsetup_r+0x9a>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffc:	d003      	beq.n	8006006 <__swsetup_r+0x9a>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4630      	mov	r0, r6
 8006002:	f000 f867 	bl	80060d4 <__smakebuf_r>
 8006006:	89a2      	ldrh	r2, [r4, #12]
 8006008:	f012 0301 	ands.w	r3, r2, #1
 800600c:	d00c      	beq.n	8006028 <__swsetup_r+0xbc>
 800600e:	2300      	movs	r3, #0
 8006010:	60a3      	str	r3, [r4, #8]
 8006012:	6963      	ldr	r3, [r4, #20]
 8006014:	425b      	negs	r3, r3
 8006016:	61a3      	str	r3, [r4, #24]
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	b953      	cbnz	r3, 8006032 <__swsetup_r+0xc6>
 800601c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006020:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006024:	d1ba      	bne.n	8005f9c <__swsetup_r+0x30>
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	0792      	lsls	r2, r2, #30
 800602a:	bf58      	it	pl
 800602c:	6963      	ldrpl	r3, [r4, #20]
 800602e:	60a3      	str	r3, [r4, #8]
 8006030:	e7f2      	b.n	8006018 <__swsetup_r+0xac>
 8006032:	2000      	movs	r0, #0
 8006034:	e7f7      	b.n	8006026 <__swsetup_r+0xba>
 8006036:	bf00      	nop
 8006038:	20000040 	.word	0x20000040
 800603c:	08006c90 	.word	0x08006c90
 8006040:	08006cb0 	.word	0x08006cb0
 8006044:	08006c70 	.word	0x08006c70

08006048 <_close_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4c06      	ldr	r4, [pc, #24]	; (8006064 <_close_r+0x1c>)
 800604c:	2300      	movs	r3, #0
 800604e:	4605      	mov	r5, r0
 8006050:	4608      	mov	r0, r1
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	f7fb fac1 	bl	80015da <_close>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_close_r+0x1a>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	b103      	cbz	r3, 8006062 <_close_r+0x1a>
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	20000218 	.word	0x20000218

08006068 <_lseek_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4c07      	ldr	r4, [pc, #28]	; (8006088 <_lseek_r+0x20>)
 800606c:	4605      	mov	r5, r0
 800606e:	4608      	mov	r0, r1
 8006070:	4611      	mov	r1, r2
 8006072:	2200      	movs	r2, #0
 8006074:	6022      	str	r2, [r4, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	f7fb fad6 	bl	8001628 <_lseek>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_lseek_r+0x1e>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	b103      	cbz	r3, 8006086 <_lseek_r+0x1e>
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	20000218 	.word	0x20000218

0800608c <__swhatbuf_r>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	460e      	mov	r6, r1
 8006090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006094:	2900      	cmp	r1, #0
 8006096:	b096      	sub	sp, #88	; 0x58
 8006098:	4614      	mov	r4, r2
 800609a:	461d      	mov	r5, r3
 800609c:	da07      	bge.n	80060ae <__swhatbuf_r+0x22>
 800609e:	2300      	movs	r3, #0
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	89b3      	ldrh	r3, [r6, #12]
 80060a4:	061a      	lsls	r2, r3, #24
 80060a6:	d410      	bmi.n	80060ca <__swhatbuf_r+0x3e>
 80060a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ac:	e00e      	b.n	80060cc <__swhatbuf_r+0x40>
 80060ae:	466a      	mov	r2, sp
 80060b0:	f000 fc7e 	bl	80069b0 <_fstat_r>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	dbf2      	blt.n	800609e <__swhatbuf_r+0x12>
 80060b8:	9a01      	ldr	r2, [sp, #4]
 80060ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060c2:	425a      	negs	r2, r3
 80060c4:	415a      	adcs	r2, r3
 80060c6:	602a      	str	r2, [r5, #0]
 80060c8:	e7ee      	b.n	80060a8 <__swhatbuf_r+0x1c>
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	2000      	movs	r0, #0
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	b016      	add	sp, #88	; 0x58
 80060d2:	bd70      	pop	{r4, r5, r6, pc}

080060d4 <__smakebuf_r>:
 80060d4:	898b      	ldrh	r3, [r1, #12]
 80060d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060d8:	079d      	lsls	r5, r3, #30
 80060da:	4606      	mov	r6, r0
 80060dc:	460c      	mov	r4, r1
 80060de:	d507      	bpl.n	80060f0 <__smakebuf_r+0x1c>
 80060e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	2301      	movs	r3, #1
 80060ea:	6163      	str	r3, [r4, #20]
 80060ec:	b002      	add	sp, #8
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	ab01      	add	r3, sp, #4
 80060f2:	466a      	mov	r2, sp
 80060f4:	f7ff ffca 	bl	800608c <__swhatbuf_r>
 80060f8:	9900      	ldr	r1, [sp, #0]
 80060fa:	4605      	mov	r5, r0
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff fd73 	bl	8005be8 <_malloc_r>
 8006102:	b948      	cbnz	r0, 8006118 <__smakebuf_r+0x44>
 8006104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006108:	059a      	lsls	r2, r3, #22
 800610a:	d4ef      	bmi.n	80060ec <__smakebuf_r+0x18>
 800610c:	f023 0303 	bic.w	r3, r3, #3
 8006110:	f043 0302 	orr.w	r3, r3, #2
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	e7e3      	b.n	80060e0 <__smakebuf_r+0xc>
 8006118:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <__smakebuf_r+0x7c>)
 800611a:	62b3      	str	r3, [r6, #40]	; 0x28
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	6020      	str	r0, [r4, #0]
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	9b00      	ldr	r3, [sp, #0]
 8006128:	6163      	str	r3, [r4, #20]
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	6120      	str	r0, [r4, #16]
 800612e:	b15b      	cbz	r3, 8006148 <__smakebuf_r+0x74>
 8006130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006134:	4630      	mov	r0, r6
 8006136:	f000 fc4d 	bl	80069d4 <_isatty_r>
 800613a:	b128      	cbz	r0, 8006148 <__smakebuf_r+0x74>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	81a3      	strh	r3, [r4, #12]
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	431d      	orrs	r5, r3
 800614c:	81a5      	strh	r5, [r4, #12]
 800614e:	e7cd      	b.n	80060ec <__smakebuf_r+0x18>
 8006150:	08005999 	.word	0x08005999

08006154 <__malloc_lock>:
 8006154:	4770      	bx	lr

08006156 <__malloc_unlock>:
 8006156:	4770      	bx	lr

08006158 <__ssputs_r>:
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	688e      	ldr	r6, [r1, #8]
 800615e:	429e      	cmp	r6, r3
 8006160:	4682      	mov	sl, r0
 8006162:	460c      	mov	r4, r1
 8006164:	4690      	mov	r8, r2
 8006166:	4699      	mov	r9, r3
 8006168:	d837      	bhi.n	80061da <__ssputs_r+0x82>
 800616a:	898a      	ldrh	r2, [r1, #12]
 800616c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006170:	d031      	beq.n	80061d6 <__ssputs_r+0x7e>
 8006172:	6825      	ldr	r5, [r4, #0]
 8006174:	6909      	ldr	r1, [r1, #16]
 8006176:	1a6f      	subs	r7, r5, r1
 8006178:	6965      	ldr	r5, [r4, #20]
 800617a:	2302      	movs	r3, #2
 800617c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006180:	fb95 f5f3 	sdiv	r5, r5, r3
 8006184:	f109 0301 	add.w	r3, r9, #1
 8006188:	443b      	add	r3, r7
 800618a:	429d      	cmp	r5, r3
 800618c:	bf38      	it	cc
 800618e:	461d      	movcc	r5, r3
 8006190:	0553      	lsls	r3, r2, #21
 8006192:	d530      	bpl.n	80061f6 <__ssputs_r+0x9e>
 8006194:	4629      	mov	r1, r5
 8006196:	f7ff fd27 	bl	8005be8 <_malloc_r>
 800619a:	4606      	mov	r6, r0
 800619c:	b950      	cbnz	r0, 80061b4 <__ssputs_r+0x5c>
 800619e:	230c      	movs	r3, #12
 80061a0:	f8ca 3000 	str.w	r3, [sl]
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	463a      	mov	r2, r7
 80061b6:	6921      	ldr	r1, [r4, #16]
 80061b8:	f000 fc1c 	bl	80069f4 <memcpy>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	6126      	str	r6, [r4, #16]
 80061ca:	6165      	str	r5, [r4, #20]
 80061cc:	443e      	add	r6, r7
 80061ce:	1bed      	subs	r5, r5, r7
 80061d0:	6026      	str	r6, [r4, #0]
 80061d2:	60a5      	str	r5, [r4, #8]
 80061d4:	464e      	mov	r6, r9
 80061d6:	454e      	cmp	r6, r9
 80061d8:	d900      	bls.n	80061dc <__ssputs_r+0x84>
 80061da:	464e      	mov	r6, r9
 80061dc:	4632      	mov	r2, r6
 80061de:	4641      	mov	r1, r8
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	f000 fc12 	bl	8006a0a <memmove>
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	1b9b      	subs	r3, r3, r6
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	441e      	add	r6, r3
 80061f0:	6026      	str	r6, [r4, #0]
 80061f2:	2000      	movs	r0, #0
 80061f4:	e7dc      	b.n	80061b0 <__ssputs_r+0x58>
 80061f6:	462a      	mov	r2, r5
 80061f8:	f000 fc20 	bl	8006a3c <_realloc_r>
 80061fc:	4606      	mov	r6, r0
 80061fe:	2800      	cmp	r0, #0
 8006200:	d1e2      	bne.n	80061c8 <__ssputs_r+0x70>
 8006202:	6921      	ldr	r1, [r4, #16]
 8006204:	4650      	mov	r0, sl
 8006206:	f7ff fca1 	bl	8005b4c <_free_r>
 800620a:	e7c8      	b.n	800619e <__ssputs_r+0x46>

0800620c <_svfiprintf_r>:
 800620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	461d      	mov	r5, r3
 8006212:	898b      	ldrh	r3, [r1, #12]
 8006214:	061f      	lsls	r7, r3, #24
 8006216:	b09d      	sub	sp, #116	; 0x74
 8006218:	4680      	mov	r8, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4616      	mov	r6, r2
 800621e:	d50f      	bpl.n	8006240 <_svfiprintf_r+0x34>
 8006220:	690b      	ldr	r3, [r1, #16]
 8006222:	b96b      	cbnz	r3, 8006240 <_svfiprintf_r+0x34>
 8006224:	2140      	movs	r1, #64	; 0x40
 8006226:	f7ff fcdf 	bl	8005be8 <_malloc_r>
 800622a:	6020      	str	r0, [r4, #0]
 800622c:	6120      	str	r0, [r4, #16]
 800622e:	b928      	cbnz	r0, 800623c <_svfiprintf_r+0x30>
 8006230:	230c      	movs	r3, #12
 8006232:	f8c8 3000 	str.w	r3, [r8]
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	e0c8      	b.n	80063ce <_svfiprintf_r+0x1c2>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	2300      	movs	r3, #0
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	2320      	movs	r3, #32
 8006246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800624a:	2330      	movs	r3, #48	; 0x30
 800624c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006250:	9503      	str	r5, [sp, #12]
 8006252:	f04f 0b01 	mov.w	fp, #1
 8006256:	4637      	mov	r7, r6
 8006258:	463d      	mov	r5, r7
 800625a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800625e:	b10b      	cbz	r3, 8006264 <_svfiprintf_r+0x58>
 8006260:	2b25      	cmp	r3, #37	; 0x25
 8006262:	d13e      	bne.n	80062e2 <_svfiprintf_r+0xd6>
 8006264:	ebb7 0a06 	subs.w	sl, r7, r6
 8006268:	d00b      	beq.n	8006282 <_svfiprintf_r+0x76>
 800626a:	4653      	mov	r3, sl
 800626c:	4632      	mov	r2, r6
 800626e:	4621      	mov	r1, r4
 8006270:	4640      	mov	r0, r8
 8006272:	f7ff ff71 	bl	8006158 <__ssputs_r>
 8006276:	3001      	adds	r0, #1
 8006278:	f000 80a4 	beq.w	80063c4 <_svfiprintf_r+0x1b8>
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	4453      	add	r3, sl
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	783b      	ldrb	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 809d 	beq.w	80063c4 <_svfiprintf_r+0x1b8>
 800628a:	2300      	movs	r3, #0
 800628c:	f04f 32ff 	mov.w	r2, #4294967295
 8006290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	9307      	str	r3, [sp, #28]
 8006298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800629c:	931a      	str	r3, [sp, #104]	; 0x68
 800629e:	462f      	mov	r7, r5
 80062a0:	2205      	movs	r2, #5
 80062a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062a6:	4850      	ldr	r0, [pc, #320]	; (80063e8 <_svfiprintf_r+0x1dc>)
 80062a8:	f7fa f82a 	bl	8000300 <memchr>
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	b9d0      	cbnz	r0, 80062e6 <_svfiprintf_r+0xda>
 80062b0:	06d9      	lsls	r1, r3, #27
 80062b2:	bf44      	itt	mi
 80062b4:	2220      	movmi	r2, #32
 80062b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062ba:	071a      	lsls	r2, r3, #28
 80062bc:	bf44      	itt	mi
 80062be:	222b      	movmi	r2, #43	; 0x2b
 80062c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062c4:	782a      	ldrb	r2, [r5, #0]
 80062c6:	2a2a      	cmp	r2, #42	; 0x2a
 80062c8:	d015      	beq.n	80062f6 <_svfiprintf_r+0xea>
 80062ca:	9a07      	ldr	r2, [sp, #28]
 80062cc:	462f      	mov	r7, r5
 80062ce:	2000      	movs	r0, #0
 80062d0:	250a      	movs	r5, #10
 80062d2:	4639      	mov	r1, r7
 80062d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d8:	3b30      	subs	r3, #48	; 0x30
 80062da:	2b09      	cmp	r3, #9
 80062dc:	d94d      	bls.n	800637a <_svfiprintf_r+0x16e>
 80062de:	b1b8      	cbz	r0, 8006310 <_svfiprintf_r+0x104>
 80062e0:	e00f      	b.n	8006302 <_svfiprintf_r+0xf6>
 80062e2:	462f      	mov	r7, r5
 80062e4:	e7b8      	b.n	8006258 <_svfiprintf_r+0x4c>
 80062e6:	4a40      	ldr	r2, [pc, #256]	; (80063e8 <_svfiprintf_r+0x1dc>)
 80062e8:	1a80      	subs	r0, r0, r2
 80062ea:	fa0b f000 	lsl.w	r0, fp, r0
 80062ee:	4318      	orrs	r0, r3
 80062f0:	9004      	str	r0, [sp, #16]
 80062f2:	463d      	mov	r5, r7
 80062f4:	e7d3      	b.n	800629e <_svfiprintf_r+0x92>
 80062f6:	9a03      	ldr	r2, [sp, #12]
 80062f8:	1d11      	adds	r1, r2, #4
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	9103      	str	r1, [sp, #12]
 80062fe:	2a00      	cmp	r2, #0
 8006300:	db01      	blt.n	8006306 <_svfiprintf_r+0xfa>
 8006302:	9207      	str	r2, [sp, #28]
 8006304:	e004      	b.n	8006310 <_svfiprintf_r+0x104>
 8006306:	4252      	negs	r2, r2
 8006308:	f043 0302 	orr.w	r3, r3, #2
 800630c:	9207      	str	r2, [sp, #28]
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	783b      	ldrb	r3, [r7, #0]
 8006312:	2b2e      	cmp	r3, #46	; 0x2e
 8006314:	d10c      	bne.n	8006330 <_svfiprintf_r+0x124>
 8006316:	787b      	ldrb	r3, [r7, #1]
 8006318:	2b2a      	cmp	r3, #42	; 0x2a
 800631a:	d133      	bne.n	8006384 <_svfiprintf_r+0x178>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	9203      	str	r2, [sp, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfb8      	it	lt
 8006328:	f04f 33ff 	movlt.w	r3, #4294967295
 800632c:	3702      	adds	r7, #2
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	4d2e      	ldr	r5, [pc, #184]	; (80063ec <_svfiprintf_r+0x1e0>)
 8006332:	7839      	ldrb	r1, [r7, #0]
 8006334:	2203      	movs	r2, #3
 8006336:	4628      	mov	r0, r5
 8006338:	f7f9 ffe2 	bl	8000300 <memchr>
 800633c:	b138      	cbz	r0, 800634e <_svfiprintf_r+0x142>
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	1b40      	subs	r0, r0, r5
 8006342:	fa03 f000 	lsl.w	r0, r3, r0
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	4303      	orrs	r3, r0
 800634a:	3701      	adds	r7, #1
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	7839      	ldrb	r1, [r7, #0]
 8006350:	4827      	ldr	r0, [pc, #156]	; (80063f0 <_svfiprintf_r+0x1e4>)
 8006352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006356:	2206      	movs	r2, #6
 8006358:	1c7e      	adds	r6, r7, #1
 800635a:	f7f9 ffd1 	bl	8000300 <memchr>
 800635e:	2800      	cmp	r0, #0
 8006360:	d038      	beq.n	80063d4 <_svfiprintf_r+0x1c8>
 8006362:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <_svfiprintf_r+0x1e8>)
 8006364:	bb13      	cbnz	r3, 80063ac <_svfiprintf_r+0x1a0>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3307      	adds	r3, #7
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	3308      	adds	r3, #8
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	444b      	add	r3, r9
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	e76d      	b.n	8006256 <_svfiprintf_r+0x4a>
 800637a:	fb05 3202 	mla	r2, r5, r2, r3
 800637e:	2001      	movs	r0, #1
 8006380:	460f      	mov	r7, r1
 8006382:	e7a6      	b.n	80062d2 <_svfiprintf_r+0xc6>
 8006384:	2300      	movs	r3, #0
 8006386:	3701      	adds	r7, #1
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	4619      	mov	r1, r3
 800638c:	250a      	movs	r5, #10
 800638e:	4638      	mov	r0, r7
 8006390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006394:	3a30      	subs	r2, #48	; 0x30
 8006396:	2a09      	cmp	r2, #9
 8006398:	d903      	bls.n	80063a2 <_svfiprintf_r+0x196>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c8      	beq.n	8006330 <_svfiprintf_r+0x124>
 800639e:	9105      	str	r1, [sp, #20]
 80063a0:	e7c6      	b.n	8006330 <_svfiprintf_r+0x124>
 80063a2:	fb05 2101 	mla	r1, r5, r1, r2
 80063a6:	2301      	movs	r3, #1
 80063a8:	4607      	mov	r7, r0
 80063aa:	e7f0      	b.n	800638e <_svfiprintf_r+0x182>
 80063ac:	ab03      	add	r3, sp, #12
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4622      	mov	r2, r4
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <_svfiprintf_r+0x1ec>)
 80063b4:	a904      	add	r1, sp, #16
 80063b6:	4640      	mov	r0, r8
 80063b8:	f3af 8000 	nop.w
 80063bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063c0:	4681      	mov	r9, r0
 80063c2:	d1d6      	bne.n	8006372 <_svfiprintf_r+0x166>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	f53f af35 	bmi.w	8006236 <_svfiprintf_r+0x2a>
 80063cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ce:	b01d      	add	sp, #116	; 0x74
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	4622      	mov	r2, r4
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <_svfiprintf_r+0x1ec>)
 80063dc:	a904      	add	r1, sp, #16
 80063de:	4640      	mov	r0, r8
 80063e0:	f000 f9c2 	bl	8006768 <_printf_i>
 80063e4:	e7ea      	b.n	80063bc <_svfiprintf_r+0x1b0>
 80063e6:	bf00      	nop
 80063e8:	08006cd4 	.word	0x08006cd4
 80063ec:	08006cda 	.word	0x08006cda
 80063f0:	08006cde 	.word	0x08006cde
 80063f4:	00000000 	.word	0x00000000
 80063f8:	08006159 	.word	0x08006159

080063fc <__sfputc_r>:
 80063fc:	6893      	ldr	r3, [r2, #8]
 80063fe:	3b01      	subs	r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	b410      	push	{r4}
 8006404:	6093      	str	r3, [r2, #8]
 8006406:	da08      	bge.n	800641a <__sfputc_r+0x1e>
 8006408:	6994      	ldr	r4, [r2, #24]
 800640a:	42a3      	cmp	r3, r4
 800640c:	db01      	blt.n	8006412 <__sfputc_r+0x16>
 800640e:	290a      	cmp	r1, #10
 8006410:	d103      	bne.n	800641a <__sfputc_r+0x1e>
 8006412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006416:	f7ff bd45 	b.w	8005ea4 <__swbuf_r>
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	1c58      	adds	r0, r3, #1
 800641e:	6010      	str	r0, [r2, #0]
 8006420:	7019      	strb	r1, [r3, #0]
 8006422:	4608      	mov	r0, r1
 8006424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006428:	4770      	bx	lr

0800642a <__sfputs_r>:
 800642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	4614      	mov	r4, r2
 8006432:	18d5      	adds	r5, r2, r3
 8006434:	42ac      	cmp	r4, r5
 8006436:	d101      	bne.n	800643c <__sfputs_r+0x12>
 8006438:	2000      	movs	r0, #0
 800643a:	e007      	b.n	800644c <__sfputs_r+0x22>
 800643c:	463a      	mov	r2, r7
 800643e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006442:	4630      	mov	r0, r6
 8006444:	f7ff ffda 	bl	80063fc <__sfputc_r>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d1f3      	bne.n	8006434 <__sfputs_r+0xa>
 800644c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006450 <_vfiprintf_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	460c      	mov	r4, r1
 8006456:	b09d      	sub	sp, #116	; 0x74
 8006458:	4617      	mov	r7, r2
 800645a:	461d      	mov	r5, r3
 800645c:	4606      	mov	r6, r0
 800645e:	b118      	cbz	r0, 8006468 <_vfiprintf_r+0x18>
 8006460:	6983      	ldr	r3, [r0, #24]
 8006462:	b90b      	cbnz	r3, 8006468 <_vfiprintf_r+0x18>
 8006464:	f7ff fab4 	bl	80059d0 <__sinit>
 8006468:	4b7c      	ldr	r3, [pc, #496]	; (800665c <_vfiprintf_r+0x20c>)
 800646a:	429c      	cmp	r4, r3
 800646c:	d158      	bne.n	8006520 <_vfiprintf_r+0xd0>
 800646e:	6874      	ldr	r4, [r6, #4]
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	0718      	lsls	r0, r3, #28
 8006474:	d55e      	bpl.n	8006534 <_vfiprintf_r+0xe4>
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d05b      	beq.n	8006534 <_vfiprintf_r+0xe4>
 800647c:	2300      	movs	r3, #0
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	2320      	movs	r3, #32
 8006482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006486:	2330      	movs	r3, #48	; 0x30
 8006488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648c:	9503      	str	r5, [sp, #12]
 800648e:	f04f 0b01 	mov.w	fp, #1
 8006492:	46b8      	mov	r8, r7
 8006494:	4645      	mov	r5, r8
 8006496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800649a:	b10b      	cbz	r3, 80064a0 <_vfiprintf_r+0x50>
 800649c:	2b25      	cmp	r3, #37	; 0x25
 800649e:	d154      	bne.n	800654a <_vfiprintf_r+0xfa>
 80064a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80064a4:	d00b      	beq.n	80064be <_vfiprintf_r+0x6e>
 80064a6:	4653      	mov	r3, sl
 80064a8:	463a      	mov	r2, r7
 80064aa:	4621      	mov	r1, r4
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7ff ffbc 	bl	800642a <__sfputs_r>
 80064b2:	3001      	adds	r0, #1
 80064b4:	f000 80c2 	beq.w	800663c <_vfiprintf_r+0x1ec>
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	4453      	add	r3, sl
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	f898 3000 	ldrb.w	r3, [r8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80ba 	beq.w	800663c <_vfiprintf_r+0x1ec>
 80064c8:	2300      	movs	r3, #0
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	9307      	str	r3, [sp, #28]
 80064d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064da:	931a      	str	r3, [sp, #104]	; 0x68
 80064dc:	46a8      	mov	r8, r5
 80064de:	2205      	movs	r2, #5
 80064e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80064e4:	485e      	ldr	r0, [pc, #376]	; (8006660 <_vfiprintf_r+0x210>)
 80064e6:	f7f9 ff0b 	bl	8000300 <memchr>
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	bb78      	cbnz	r0, 800654e <_vfiprintf_r+0xfe>
 80064ee:	06d9      	lsls	r1, r3, #27
 80064f0:	bf44      	itt	mi
 80064f2:	2220      	movmi	r2, #32
 80064f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064f8:	071a      	lsls	r2, r3, #28
 80064fa:	bf44      	itt	mi
 80064fc:	222b      	movmi	r2, #43	; 0x2b
 80064fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006502:	782a      	ldrb	r2, [r5, #0]
 8006504:	2a2a      	cmp	r2, #42	; 0x2a
 8006506:	d02a      	beq.n	800655e <_vfiprintf_r+0x10e>
 8006508:	9a07      	ldr	r2, [sp, #28]
 800650a:	46a8      	mov	r8, r5
 800650c:	2000      	movs	r0, #0
 800650e:	250a      	movs	r5, #10
 8006510:	4641      	mov	r1, r8
 8006512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006516:	3b30      	subs	r3, #48	; 0x30
 8006518:	2b09      	cmp	r3, #9
 800651a:	d969      	bls.n	80065f0 <_vfiprintf_r+0x1a0>
 800651c:	b360      	cbz	r0, 8006578 <_vfiprintf_r+0x128>
 800651e:	e024      	b.n	800656a <_vfiprintf_r+0x11a>
 8006520:	4b50      	ldr	r3, [pc, #320]	; (8006664 <_vfiprintf_r+0x214>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d101      	bne.n	800652a <_vfiprintf_r+0xda>
 8006526:	68b4      	ldr	r4, [r6, #8]
 8006528:	e7a2      	b.n	8006470 <_vfiprintf_r+0x20>
 800652a:	4b4f      	ldr	r3, [pc, #316]	; (8006668 <_vfiprintf_r+0x218>)
 800652c:	429c      	cmp	r4, r3
 800652e:	bf08      	it	eq
 8006530:	68f4      	ldreq	r4, [r6, #12]
 8006532:	e79d      	b.n	8006470 <_vfiprintf_r+0x20>
 8006534:	4621      	mov	r1, r4
 8006536:	4630      	mov	r0, r6
 8006538:	f7ff fd18 	bl	8005f6c <__swsetup_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	d09d      	beq.n	800647c <_vfiprintf_r+0x2c>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	b01d      	add	sp, #116	; 0x74
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	46a8      	mov	r8, r5
 800654c:	e7a2      	b.n	8006494 <_vfiprintf_r+0x44>
 800654e:	4a44      	ldr	r2, [pc, #272]	; (8006660 <_vfiprintf_r+0x210>)
 8006550:	1a80      	subs	r0, r0, r2
 8006552:	fa0b f000 	lsl.w	r0, fp, r0
 8006556:	4318      	orrs	r0, r3
 8006558:	9004      	str	r0, [sp, #16]
 800655a:	4645      	mov	r5, r8
 800655c:	e7be      	b.n	80064dc <_vfiprintf_r+0x8c>
 800655e:	9a03      	ldr	r2, [sp, #12]
 8006560:	1d11      	adds	r1, r2, #4
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	9103      	str	r1, [sp, #12]
 8006566:	2a00      	cmp	r2, #0
 8006568:	db01      	blt.n	800656e <_vfiprintf_r+0x11e>
 800656a:	9207      	str	r2, [sp, #28]
 800656c:	e004      	b.n	8006578 <_vfiprintf_r+0x128>
 800656e:	4252      	negs	r2, r2
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	9207      	str	r2, [sp, #28]
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	f898 3000 	ldrb.w	r3, [r8]
 800657c:	2b2e      	cmp	r3, #46	; 0x2e
 800657e:	d10e      	bne.n	800659e <_vfiprintf_r+0x14e>
 8006580:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006584:	2b2a      	cmp	r3, #42	; 0x2a
 8006586:	d138      	bne.n	80065fa <_vfiprintf_r+0x1aa>
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	9203      	str	r2, [sp, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	bfb8      	it	lt
 8006594:	f04f 33ff 	movlt.w	r3, #4294967295
 8006598:	f108 0802 	add.w	r8, r8, #2
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	4d33      	ldr	r5, [pc, #204]	; (800666c <_vfiprintf_r+0x21c>)
 80065a0:	f898 1000 	ldrb.w	r1, [r8]
 80065a4:	2203      	movs	r2, #3
 80065a6:	4628      	mov	r0, r5
 80065a8:	f7f9 feaa 	bl	8000300 <memchr>
 80065ac:	b140      	cbz	r0, 80065c0 <_vfiprintf_r+0x170>
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	1b40      	subs	r0, r0, r5
 80065b2:	fa03 f000 	lsl.w	r0, r3, r0
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	4303      	orrs	r3, r0
 80065ba:	f108 0801 	add.w	r8, r8, #1
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	f898 1000 	ldrb.w	r1, [r8]
 80065c4:	482a      	ldr	r0, [pc, #168]	; (8006670 <_vfiprintf_r+0x220>)
 80065c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ca:	2206      	movs	r2, #6
 80065cc:	f108 0701 	add.w	r7, r8, #1
 80065d0:	f7f9 fe96 	bl	8000300 <memchr>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d037      	beq.n	8006648 <_vfiprintf_r+0x1f8>
 80065d8:	4b26      	ldr	r3, [pc, #152]	; (8006674 <_vfiprintf_r+0x224>)
 80065da:	bb1b      	cbnz	r3, 8006624 <_vfiprintf_r+0x1d4>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	3307      	adds	r3, #7
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	3308      	adds	r3, #8
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	444b      	add	r3, r9
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	e750      	b.n	8006492 <_vfiprintf_r+0x42>
 80065f0:	fb05 3202 	mla	r2, r5, r2, r3
 80065f4:	2001      	movs	r0, #1
 80065f6:	4688      	mov	r8, r1
 80065f8:	e78a      	b.n	8006510 <_vfiprintf_r+0xc0>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f108 0801 	add.w	r8, r8, #1
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	4619      	mov	r1, r3
 8006604:	250a      	movs	r5, #10
 8006606:	4640      	mov	r0, r8
 8006608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660c:	3a30      	subs	r2, #48	; 0x30
 800660e:	2a09      	cmp	r2, #9
 8006610:	d903      	bls.n	800661a <_vfiprintf_r+0x1ca>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0c3      	beq.n	800659e <_vfiprintf_r+0x14e>
 8006616:	9105      	str	r1, [sp, #20]
 8006618:	e7c1      	b.n	800659e <_vfiprintf_r+0x14e>
 800661a:	fb05 2101 	mla	r1, r5, r1, r2
 800661e:	2301      	movs	r3, #1
 8006620:	4680      	mov	r8, r0
 8006622:	e7f0      	b.n	8006606 <_vfiprintf_r+0x1b6>
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	4622      	mov	r2, r4
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <_vfiprintf_r+0x228>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	4630      	mov	r0, r6
 8006630:	f3af 8000 	nop.w
 8006634:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006638:	4681      	mov	r9, r0
 800663a:	d1d5      	bne.n	80065e8 <_vfiprintf_r+0x198>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	065b      	lsls	r3, r3, #25
 8006640:	f53f af7e 	bmi.w	8006540 <_vfiprintf_r+0xf0>
 8006644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006646:	e77d      	b.n	8006544 <_vfiprintf_r+0xf4>
 8006648:	ab03      	add	r3, sp, #12
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4622      	mov	r2, r4
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <_vfiprintf_r+0x228>)
 8006650:	a904      	add	r1, sp, #16
 8006652:	4630      	mov	r0, r6
 8006654:	f000 f888 	bl	8006768 <_printf_i>
 8006658:	e7ec      	b.n	8006634 <_vfiprintf_r+0x1e4>
 800665a:	bf00      	nop
 800665c:	08006c90 	.word	0x08006c90
 8006660:	08006cd4 	.word	0x08006cd4
 8006664:	08006cb0 	.word	0x08006cb0
 8006668:	08006c70 	.word	0x08006c70
 800666c:	08006cda 	.word	0x08006cda
 8006670:	08006cde 	.word	0x08006cde
 8006674:	00000000 	.word	0x00000000
 8006678:	0800642b 	.word	0x0800642b

0800667c <_printf_common>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	4691      	mov	r9, r2
 8006682:	461f      	mov	r7, r3
 8006684:	688a      	ldr	r2, [r1, #8]
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800668c:	4293      	cmp	r3, r2
 800668e:	bfb8      	it	lt
 8006690:	4613      	movlt	r3, r2
 8006692:	f8c9 3000 	str.w	r3, [r9]
 8006696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669a:	4606      	mov	r6, r0
 800669c:	460c      	mov	r4, r1
 800669e:	b112      	cbz	r2, 80066a6 <_printf_common+0x2a>
 80066a0:	3301      	adds	r3, #1
 80066a2:	f8c9 3000 	str.w	r3, [r9]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0699      	lsls	r1, r3, #26
 80066aa:	bf42      	ittt	mi
 80066ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066b0:	3302      	addmi	r3, #2
 80066b2:	f8c9 3000 	strmi.w	r3, [r9]
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	f015 0506 	ands.w	r5, r5, #6
 80066bc:	d107      	bne.n	80066ce <_printf_common+0x52>
 80066be:	f104 0a19 	add.w	sl, r4, #25
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	f8d9 2000 	ldr.w	r2, [r9]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	dc28      	bgt.n	8006720 <_printf_common+0xa4>
 80066ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	3300      	adds	r3, #0
 80066d6:	bf18      	it	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	0692      	lsls	r2, r2, #26
 80066dc:	d42d      	bmi.n	800673a <_printf_common+0xbe>
 80066de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e2:	4639      	mov	r1, r7
 80066e4:	4630      	mov	r0, r6
 80066e6:	47c0      	blx	r8
 80066e8:	3001      	adds	r0, #1
 80066ea:	d020      	beq.n	800672e <_printf_common+0xb2>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	68e5      	ldr	r5, [r4, #12]
 80066f0:	f8d9 2000 	ldr.w	r2, [r9]
 80066f4:	f003 0306 	and.w	r3, r3, #6
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	bf08      	it	eq
 80066fc:	1aad      	subeq	r5, r5, r2
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	6922      	ldr	r2, [r4, #16]
 8006702:	bf0c      	ite	eq
 8006704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006708:	2500      	movne	r5, #0
 800670a:	4293      	cmp	r3, r2
 800670c:	bfc4      	itt	gt
 800670e:	1a9b      	subgt	r3, r3, r2
 8006710:	18ed      	addgt	r5, r5, r3
 8006712:	f04f 0900 	mov.w	r9, #0
 8006716:	341a      	adds	r4, #26
 8006718:	454d      	cmp	r5, r9
 800671a:	d11a      	bne.n	8006752 <_printf_common+0xd6>
 800671c:	2000      	movs	r0, #0
 800671e:	e008      	b.n	8006732 <_printf_common+0xb6>
 8006720:	2301      	movs	r3, #1
 8006722:	4652      	mov	r2, sl
 8006724:	4639      	mov	r1, r7
 8006726:	4630      	mov	r0, r6
 8006728:	47c0      	blx	r8
 800672a:	3001      	adds	r0, #1
 800672c:	d103      	bne.n	8006736 <_printf_common+0xba>
 800672e:	f04f 30ff 	mov.w	r0, #4294967295
 8006732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006736:	3501      	adds	r5, #1
 8006738:	e7c3      	b.n	80066c2 <_printf_common+0x46>
 800673a:	18e1      	adds	r1, r4, r3
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	2030      	movs	r0, #48	; 0x30
 8006740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006744:	4422      	add	r2, r4
 8006746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800674a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800674e:	3302      	adds	r3, #2
 8006750:	e7c5      	b.n	80066de <_printf_common+0x62>
 8006752:	2301      	movs	r3, #1
 8006754:	4622      	mov	r2, r4
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	47c0      	blx	r8
 800675c:	3001      	adds	r0, #1
 800675e:	d0e6      	beq.n	800672e <_printf_common+0xb2>
 8006760:	f109 0901 	add.w	r9, r9, #1
 8006764:	e7d8      	b.n	8006718 <_printf_common+0x9c>
	...

08006768 <_printf_i>:
 8006768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800676c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006770:	460c      	mov	r4, r1
 8006772:	7e09      	ldrb	r1, [r1, #24]
 8006774:	b085      	sub	sp, #20
 8006776:	296e      	cmp	r1, #110	; 0x6e
 8006778:	4617      	mov	r7, r2
 800677a:	4606      	mov	r6, r0
 800677c:	4698      	mov	r8, r3
 800677e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006780:	f000 80b3 	beq.w	80068ea <_printf_i+0x182>
 8006784:	d822      	bhi.n	80067cc <_printf_i+0x64>
 8006786:	2963      	cmp	r1, #99	; 0x63
 8006788:	d036      	beq.n	80067f8 <_printf_i+0x90>
 800678a:	d80a      	bhi.n	80067a2 <_printf_i+0x3a>
 800678c:	2900      	cmp	r1, #0
 800678e:	f000 80b9 	beq.w	8006904 <_printf_i+0x19c>
 8006792:	2958      	cmp	r1, #88	; 0x58
 8006794:	f000 8083 	beq.w	800689e <_printf_i+0x136>
 8006798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067a0:	e032      	b.n	8006808 <_printf_i+0xa0>
 80067a2:	2964      	cmp	r1, #100	; 0x64
 80067a4:	d001      	beq.n	80067aa <_printf_i+0x42>
 80067a6:	2969      	cmp	r1, #105	; 0x69
 80067a8:	d1f6      	bne.n	8006798 <_printf_i+0x30>
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	6813      	ldr	r3, [r2, #0]
 80067ae:	0605      	lsls	r5, r0, #24
 80067b0:	f103 0104 	add.w	r1, r3, #4
 80067b4:	d52a      	bpl.n	800680c <_printf_i+0xa4>
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6011      	str	r1, [r2, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da03      	bge.n	80067c6 <_printf_i+0x5e>
 80067be:	222d      	movs	r2, #45	; 0x2d
 80067c0:	425b      	negs	r3, r3
 80067c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067c6:	486f      	ldr	r0, [pc, #444]	; (8006984 <_printf_i+0x21c>)
 80067c8:	220a      	movs	r2, #10
 80067ca:	e039      	b.n	8006840 <_printf_i+0xd8>
 80067cc:	2973      	cmp	r1, #115	; 0x73
 80067ce:	f000 809d 	beq.w	800690c <_printf_i+0x1a4>
 80067d2:	d808      	bhi.n	80067e6 <_printf_i+0x7e>
 80067d4:	296f      	cmp	r1, #111	; 0x6f
 80067d6:	d020      	beq.n	800681a <_printf_i+0xb2>
 80067d8:	2970      	cmp	r1, #112	; 0x70
 80067da:	d1dd      	bne.n	8006798 <_printf_i+0x30>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	f043 0320 	orr.w	r3, r3, #32
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	e003      	b.n	80067ee <_printf_i+0x86>
 80067e6:	2975      	cmp	r1, #117	; 0x75
 80067e8:	d017      	beq.n	800681a <_printf_i+0xb2>
 80067ea:	2978      	cmp	r1, #120	; 0x78
 80067ec:	d1d4      	bne.n	8006798 <_printf_i+0x30>
 80067ee:	2378      	movs	r3, #120	; 0x78
 80067f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067f4:	4864      	ldr	r0, [pc, #400]	; (8006988 <_printf_i+0x220>)
 80067f6:	e055      	b.n	80068a4 <_printf_i+0x13c>
 80067f8:	6813      	ldr	r3, [r2, #0]
 80067fa:	1d19      	adds	r1, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6011      	str	r1, [r2, #0]
 8006800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006808:	2301      	movs	r3, #1
 800680a:	e08c      	b.n	8006926 <_printf_i+0x1be>
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6011      	str	r1, [r2, #0]
 8006810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006814:	bf18      	it	ne
 8006816:	b21b      	sxthne	r3, r3
 8006818:	e7cf      	b.n	80067ba <_printf_i+0x52>
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	6825      	ldr	r5, [r4, #0]
 800681e:	1d18      	adds	r0, r3, #4
 8006820:	6010      	str	r0, [r2, #0]
 8006822:	0628      	lsls	r0, r5, #24
 8006824:	d501      	bpl.n	800682a <_printf_i+0xc2>
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	e002      	b.n	8006830 <_printf_i+0xc8>
 800682a:	0668      	lsls	r0, r5, #25
 800682c:	d5fb      	bpl.n	8006826 <_printf_i+0xbe>
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	4854      	ldr	r0, [pc, #336]	; (8006984 <_printf_i+0x21c>)
 8006832:	296f      	cmp	r1, #111	; 0x6f
 8006834:	bf14      	ite	ne
 8006836:	220a      	movne	r2, #10
 8006838:	2208      	moveq	r2, #8
 800683a:	2100      	movs	r1, #0
 800683c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006840:	6865      	ldr	r5, [r4, #4]
 8006842:	60a5      	str	r5, [r4, #8]
 8006844:	2d00      	cmp	r5, #0
 8006846:	f2c0 8095 	blt.w	8006974 <_printf_i+0x20c>
 800684a:	6821      	ldr	r1, [r4, #0]
 800684c:	f021 0104 	bic.w	r1, r1, #4
 8006850:	6021      	str	r1, [r4, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d13d      	bne.n	80068d2 <_printf_i+0x16a>
 8006856:	2d00      	cmp	r5, #0
 8006858:	f040 808e 	bne.w	8006978 <_printf_i+0x210>
 800685c:	4665      	mov	r5, ip
 800685e:	2a08      	cmp	r2, #8
 8006860:	d10b      	bne.n	800687a <_printf_i+0x112>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	07db      	lsls	r3, r3, #31
 8006866:	d508      	bpl.n	800687a <_printf_i+0x112>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	bfde      	ittt	le
 8006870:	2330      	movle	r3, #48	; 0x30
 8006872:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006876:	f105 35ff 	addle.w	r5, r5, #4294967295
 800687a:	ebac 0305 	sub.w	r3, ip, r5
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	f8cd 8000 	str.w	r8, [sp]
 8006884:	463b      	mov	r3, r7
 8006886:	aa03      	add	r2, sp, #12
 8006888:	4621      	mov	r1, r4
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff fef6 	bl	800667c <_printf_common>
 8006890:	3001      	adds	r0, #1
 8006892:	d14d      	bne.n	8006930 <_printf_i+0x1c8>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	b005      	add	sp, #20
 800689a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689e:	4839      	ldr	r0, [pc, #228]	; (8006984 <_printf_i+0x21c>)
 80068a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068a4:	6813      	ldr	r3, [r2, #0]
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	1d1d      	adds	r5, r3, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6015      	str	r5, [r2, #0]
 80068ae:	060a      	lsls	r2, r1, #24
 80068b0:	d50b      	bpl.n	80068ca <_printf_i+0x162>
 80068b2:	07ca      	lsls	r2, r1, #31
 80068b4:	bf44      	itt	mi
 80068b6:	f041 0120 	orrmi.w	r1, r1, #32
 80068ba:	6021      	strmi	r1, [r4, #0]
 80068bc:	b91b      	cbnz	r3, 80068c6 <_printf_i+0x15e>
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	f022 0220 	bic.w	r2, r2, #32
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	2210      	movs	r2, #16
 80068c8:	e7b7      	b.n	800683a <_printf_i+0xd2>
 80068ca:	064d      	lsls	r5, r1, #25
 80068cc:	bf48      	it	mi
 80068ce:	b29b      	uxthmi	r3, r3
 80068d0:	e7ef      	b.n	80068b2 <_printf_i+0x14a>
 80068d2:	4665      	mov	r5, ip
 80068d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80068d8:	fb02 3311 	mls	r3, r2, r1, r3
 80068dc:	5cc3      	ldrb	r3, [r0, r3]
 80068de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068e2:	460b      	mov	r3, r1
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d1f5      	bne.n	80068d4 <_printf_i+0x16c>
 80068e8:	e7b9      	b.n	800685e <_printf_i+0xf6>
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	6825      	ldr	r5, [r4, #0]
 80068ee:	6961      	ldr	r1, [r4, #20]
 80068f0:	1d18      	adds	r0, r3, #4
 80068f2:	6010      	str	r0, [r2, #0]
 80068f4:	0628      	lsls	r0, r5, #24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	d501      	bpl.n	80068fe <_printf_i+0x196>
 80068fa:	6019      	str	r1, [r3, #0]
 80068fc:	e002      	b.n	8006904 <_printf_i+0x19c>
 80068fe:	066a      	lsls	r2, r5, #25
 8006900:	d5fb      	bpl.n	80068fa <_printf_i+0x192>
 8006902:	8019      	strh	r1, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	6123      	str	r3, [r4, #16]
 8006908:	4665      	mov	r5, ip
 800690a:	e7b9      	b.n	8006880 <_printf_i+0x118>
 800690c:	6813      	ldr	r3, [r2, #0]
 800690e:	1d19      	adds	r1, r3, #4
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	681d      	ldr	r5, [r3, #0]
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	2100      	movs	r1, #0
 8006918:	4628      	mov	r0, r5
 800691a:	f7f9 fcf1 	bl	8000300 <memchr>
 800691e:	b108      	cbz	r0, 8006924 <_printf_i+0x1bc>
 8006920:	1b40      	subs	r0, r0, r5
 8006922:	6060      	str	r0, [r4, #4]
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	2300      	movs	r3, #0
 800692a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692e:	e7a7      	b.n	8006880 <_printf_i+0x118>
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	462a      	mov	r2, r5
 8006934:	4639      	mov	r1, r7
 8006936:	4630      	mov	r0, r6
 8006938:	47c0      	blx	r8
 800693a:	3001      	adds	r0, #1
 800693c:	d0aa      	beq.n	8006894 <_printf_i+0x12c>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	079b      	lsls	r3, r3, #30
 8006942:	d413      	bmi.n	800696c <_printf_i+0x204>
 8006944:	68e0      	ldr	r0, [r4, #12]
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	4298      	cmp	r0, r3
 800694a:	bfb8      	it	lt
 800694c:	4618      	movlt	r0, r3
 800694e:	e7a3      	b.n	8006898 <_printf_i+0x130>
 8006950:	2301      	movs	r3, #1
 8006952:	464a      	mov	r2, r9
 8006954:	4639      	mov	r1, r7
 8006956:	4630      	mov	r0, r6
 8006958:	47c0      	blx	r8
 800695a:	3001      	adds	r0, #1
 800695c:	d09a      	beq.n	8006894 <_printf_i+0x12c>
 800695e:	3501      	adds	r5, #1
 8006960:	68e3      	ldr	r3, [r4, #12]
 8006962:	9a03      	ldr	r2, [sp, #12]
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	42ab      	cmp	r3, r5
 8006968:	dcf2      	bgt.n	8006950 <_printf_i+0x1e8>
 800696a:	e7eb      	b.n	8006944 <_printf_i+0x1dc>
 800696c:	2500      	movs	r5, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f5      	b.n	8006960 <_printf_i+0x1f8>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1ac      	bne.n	80068d2 <_printf_i+0x16a>
 8006978:	7803      	ldrb	r3, [r0, #0]
 800697a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800697e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006982:	e76c      	b.n	800685e <_printf_i+0xf6>
 8006984:	08006ce5 	.word	0x08006ce5
 8006988:	08006cf6 	.word	0x08006cf6

0800698c <_read_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4c07      	ldr	r4, [pc, #28]	; (80069ac <_read_r+0x20>)
 8006990:	4605      	mov	r5, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa fde4 	bl	8001568 <_read>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_read_r+0x1e>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_read_r+0x1e>
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20000218 	.word	0x20000218

080069b0 <_fstat_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4c07      	ldr	r4, [pc, #28]	; (80069d0 <_fstat_r+0x20>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4605      	mov	r5, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	f7fa fe18 	bl	80015f2 <_fstat>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d102      	bne.n	80069cc <_fstat_r+0x1c>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	b103      	cbz	r3, 80069cc <_fstat_r+0x1c>
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
 80069ce:	bf00      	nop
 80069d0:	20000218 	.word	0x20000218

080069d4 <_isatty_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4c06      	ldr	r4, [pc, #24]	; (80069f0 <_isatty_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4605      	mov	r5, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	f7fa fe17 	bl	8001612 <_isatty>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_isatty_r+0x1a>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_isatty_r+0x1a>
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000218 	.word	0x20000218

080069f4 <memcpy>:
 80069f4:	b510      	push	{r4, lr}
 80069f6:	1e43      	subs	r3, r0, #1
 80069f8:	440a      	add	r2, r1
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d100      	bne.n	8006a00 <memcpy+0xc>
 80069fe:	bd10      	pop	{r4, pc}
 8006a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a08:	e7f7      	b.n	80069fa <memcpy+0x6>

08006a0a <memmove>:
 8006a0a:	4288      	cmp	r0, r1
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	eb01 0302 	add.w	r3, r1, r2
 8006a12:	d807      	bhi.n	8006a24 <memmove+0x1a>
 8006a14:	1e42      	subs	r2, r0, #1
 8006a16:	4299      	cmp	r1, r3
 8006a18:	d00a      	beq.n	8006a30 <memmove+0x26>
 8006a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a22:	e7f8      	b.n	8006a16 <memmove+0xc>
 8006a24:	4283      	cmp	r3, r0
 8006a26:	d9f5      	bls.n	8006a14 <memmove+0xa>
 8006a28:	1881      	adds	r1, r0, r2
 8006a2a:	1ad2      	subs	r2, r2, r3
 8006a2c:	42d3      	cmn	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memmove+0x28>
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a3a:	e7f7      	b.n	8006a2c <memmove+0x22>

08006a3c <_realloc_r>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	4607      	mov	r7, r0
 8006a40:	4614      	mov	r4, r2
 8006a42:	460e      	mov	r6, r1
 8006a44:	b921      	cbnz	r1, 8006a50 <_realloc_r+0x14>
 8006a46:	4611      	mov	r1, r2
 8006a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a4c:	f7ff b8cc 	b.w	8005be8 <_malloc_r>
 8006a50:	b922      	cbnz	r2, 8006a5c <_realloc_r+0x20>
 8006a52:	f7ff f87b 	bl	8005b4c <_free_r>
 8006a56:	4625      	mov	r5, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5c:	f000 f814 	bl	8006a88 <_malloc_usable_size_r>
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d20f      	bcs.n	8006a84 <_realloc_r+0x48>
 8006a64:	4621      	mov	r1, r4
 8006a66:	4638      	mov	r0, r7
 8006a68:	f7ff f8be 	bl	8005be8 <_malloc_r>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d0f2      	beq.n	8006a58 <_realloc_r+0x1c>
 8006a72:	4631      	mov	r1, r6
 8006a74:	4622      	mov	r2, r4
 8006a76:	f7ff ffbd 	bl	80069f4 <memcpy>
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f7ff f865 	bl	8005b4c <_free_r>
 8006a82:	e7e9      	b.n	8006a58 <_realloc_r+0x1c>
 8006a84:	4635      	mov	r5, r6
 8006a86:	e7e7      	b.n	8006a58 <_realloc_r+0x1c>

08006a88 <_malloc_usable_size_r>:
 8006a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a8c:	1f18      	subs	r0, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bfbc      	itt	lt
 8006a92:	580b      	ldrlt	r3, [r1, r0]
 8006a94:	18c0      	addlt	r0, r0, r3
 8006a96:	4770      	bx	lr

08006a98 <_init>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_fini>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr
